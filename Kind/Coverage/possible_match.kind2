Kind.Coverage.possible_match (term: Kind.Term) (constructor: U60) : Maybe (List Kind.Term)
Kind.Coverage.possible_match (Kind.Term.ct0 ctid orig)                   const = if U60.equal (HashOf ctid) (HashOf const) { Maybe.some [] } else { Maybe.none }
Kind.Coverage.possible_match (Kind.Term.ct1 ctid orig x0)                const = if U60.equal (HashOf ctid) (HashOf const) { Maybe.some [x0 ] } else { Maybe.none }
Kind.Coverage.possible_match (Kind.Term.ct2 ctid orig x0 x1)             const = if U60.equal (HashOf ctid) (HashOf const) { Maybe.some [x0 x1] } else { Maybe.none }
Kind.Coverage.possible_match (Kind.Term.ct3 ctid orig x0 x1 x2)          const = if U60.equal (HashOf ctid) (HashOf const) { Maybe.some [x0 x1 x2] } else { Maybe.none }
Kind.Coverage.possible_match (Kind.Term.ct4 ctid orig x0 x1 x2 x3)       const = if U60.equal (HashOf ctid) (HashOf const) { Maybe.some [x0 x1 x2 x3 ] } else { Maybe.none }
Kind.Coverage.possible_match (Kind.Term.ct5 ctid orig x0 x1 x2 x3 x4)    const = if U60.equal (HashOf ctid) (HashOf const) { Maybe.some [x0 x1 x2 x3 x4] } else { Maybe.none }
Kind.Coverage.possible_match (Kind.Term.ct6 ctid orig x0 x1 x2 x3 x4 x5) const = if U60.equal (HashOf ctid) (HashOf const) { Maybe.some [x0 x1 x2 x3 x4 x5] } else { Maybe.none }
Kind.Coverage.possible_match (Kind.Term.ct7 ctid orig args)              const = if U60.equal (HashOf ctid) (HashOf const) { Kind.Coverage.possible_match args const } else { Maybe.none }
Kind.Coverage.possible_match (Kind.Term.ct8 ctid orig args)              const = if U60.equal (HashOf ctid) (HashOf const) { Kind.Coverage.possible_match args const } else { Maybe.none }
Kind.Coverage.possible_match (Kind.Term.args7 x0 x1 x2 x3 x4 x5 x6)      const = Maybe.some [x0 x1 x2 x3 x4 x5 x6]
Kind.Coverage.possible_match (Kind.Term.args8 x0 x1 x2 x3 x4 x5 x6 x7)   const = Maybe.some [x0 x1 x2 x3 x4 x5 x6 x7]
Kind.Coverage.possible_match _                                           const = Maybe.none
