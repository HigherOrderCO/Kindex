Family.ConstructorsOf (typeid: U60) : List U60

// Checks if a type is vacously true (one of the arguments is the equivalent
// to an empty type). It's useful to eliminate some impossible clauses.

Kind.Coverage.Strategies.vacously_true (ctx: Kind.Context) (funTy: Kind.Term) : Bool
Kind.Coverage.Strategies.vacously_true ctx (Kind.Term.all orig_ name_ typ body) =
  let data_type = Kind.Coverage.get_constructor_name ctx typ
  match Maybe data_type {
    some =>
      let constructors = Family.ConstructorsOf data_type.value
      // TODO: Unify with each constructor to discover how much of them are this way
      if Nat.equal (List.length constructors) Nat.zero {
        Bool.true
      } else {
        Kind.Coverage.Strategies.vacously_true ctx (Kind.Term.eval (body (Kind.Term.hol orig_ name_)))
      }
    none => Kind.Coverage.Strategies.vacously_true ctx (Kind.Term.eval (body (Kind.Term.hol orig_ name_)))
  }

Kind.Coverage.Strategies.vacously_true ctx typ = Bool.false