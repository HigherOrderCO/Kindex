Impossible <a> <b> (reason: b) : a
Impossible reason = HVM.log reason Confia

Confia <a> : a

Kind.Coverage.Strategies.remove_column (clauses: List Kind.Rule) : List Kind.Rule
Kind.Coverage.Strategies.remove_column (List.nil t)                         = List.nil
Kind.Coverage.Strategies.remove_column (List.cons t (Kind.Rule.lhs x r) xs) = List.cons r (Kind.Coverage.Strategies.remove_column xs)
Kind.Coverage.Strategies.remove_column (List.cons t x xs)                   = Impossible "Invariant: Bad Intro"

Kind.Coverage.Strategies.intro (clauses: List Kind.Rule) (orig_: U60) (name: U60) (typ: Kind.Term) (body: Kind.Term -> Kind.Term): Kind.Checker Kind.Coverage.SplitTree
Kind.Coverage.Strategies.intro clauses orig_ name typ body = do Kind.Checker {
    ask Kind.Checker.extend name typ []
    ask dep  = Kind.Checker.get_depth
    let ty   = Kind.Term.eval (body (Kind.Term.var orig_ name dep))
    ask tree = (Kind.Coverage.cover (Kind.Coverage.Strategies.remove_column clauses) ty)
    return Kind.Coverage.SplitTree.intro tree
  }