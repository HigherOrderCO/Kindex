// Runs the @Kind.Checker@ and then attempts to unify all equations produced.
Kind.Checker.unify <r> (checker: Kind.Checker r): Kind.Checker r
Kind.Checker.unify r checker =
  do Kind.Checker {
    ask r = checker
    ask equations = Kind.Checker.get_equations
    ask Kind.Checker.unify.go equations List.nil Bool.false
    return r
  }

Kind.Checker.unify.go (equations: List Kind.Equation) (unsolved: List Kind.Equation) (changed: Bool): Kind.Checker Unit
Kind.Checker.unify.go (List.nil t) (List.nil t1) changed = Kind.Checker.pure Unit.new
Kind.Checker.unify.go (List.nil t) unsolved Bool.true    = Kind.Checker.unify.go unsolved List.nil Bool.false
Kind.Checker.unify.go (List.nil t) unsolved Bool.false   = Kind.Checker.unify.go.fail unsolved
Kind.Checker.unify.go (List.cons t (Kind.Equation.new ctx orig left right) equations) unsolved changed =
  do Kind.Checker {
    ask is_equal = Kind.Checker.with_context (Kind.Checker.equal (Kind.Term.eval left) (Kind.Term.eval right)) ctx
    let unify =
      (if is_equal {
        (equations: List Kind.Equation) => (unsolved: List Kind.Equation) =>
          Kind.Checker.unify.go equations unsolved Bool.true
      } else {
        (equations: List Kind.Equation) => (unsolved: List Kind.Equation) =>
          let eqt = Kind.Equation.new ctx orig left right
          Kind.Checker.unify.go equations (List.cons eqt unsolved) changed
      }) :: (List Kind.Equation) -> (List Kind.Equation) -> Kind.Checker Unit
    (unify equations unsolved)
  }

Kind.Checker.unify.go.fail (equations: List Kind.Equation): Kind.Checker Unit
Kind.Checker.unify.go.fail (List.nil t) = Kind.Checker.pure Unit.new
Kind.Checker.unify.go.fail (List.cons t (Kind.Equation.new ctx orig left right) eqts) =
  do Kind.Checker {
    ask Kind.Checker.error (Kind.Error.type_mismatch ctx orig left right) Unit.new
    (Kind.Checker.unify.go.fail eqts)
  }
