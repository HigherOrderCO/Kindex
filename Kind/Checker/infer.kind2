TypeOf (u: U60): Kind.Term

// Function that helps the compiler to bootstrap itself.
// It's required by the limitation of arity of each constructor
// and function that would lead the type checker to not be able
// to type check FN8 and FN7 (because they would have 9 and 10
// parameters respectively).
Kind.Checker.infer_args (args: Kind.Term): U60 -> U60 -> Kind.Term

Kind.Checker.infer_args (Kind.Term.args7 x0 x1 x2 x3 x4 x5 x6) = ctid => orig =>
  Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.fn0 ctid orig) x0) x1) x2) x3) x4) x5) x6

Kind.Checker.infer_args (Kind.Term.args8 x0 x1 x2 x3 x4 x5 x6 x7) = ctid => orig =>
  Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.ct0 ctid orig) x0) x1) x2) x3) x4) x5) x6) x7

// Tries to discover a type for a term.
Kind.Checker.infer (term: Kind.Term): Kind.Checker Kind.Term
Kind.Checker.infer (Kind.Term.var orig name index) =
  do Kind.Checker {
    ask got_type = Kind.Checker.find index Maybe.none (n => t => v => Maybe.some t)
    match Maybe got_type {
      none => Kind.Checker.bind Kind.Checker.get_context (ctx => Kind.Checker.fail (Kind.Error.unbound_variable ctx orig))
      some => Kind.Checker.pure got_type.value
    }
  }

Kind.Checker.infer (Kind.Term.hol orig numb) =
  do Kind.Checker {
    ask ctx = Kind.Checker.get_context
    (Kind.Checker.fail (Kind.Error.cant_infer_hole ctx orig))
  }

Kind.Checker.infer (Kind.Term.typ orig) =
  Kind.Checker.pure (Kind.Term.typ orig)

Kind.Checker.infer (Kind.Term.all orig name type body) =
  do Kind.Checker {
    ask depth = Kind.Checker.get_depth
    ask Kind.Checker.check type (Kind.Term.typ orig)
    ask Kind.Checker.extended (Kind.Checker.check (body (Kind.Term.var orig name depth)) (Kind.Term.typ orig)) name (Kind.Term.eval type) []
    return (Kind.Term.typ orig)
  }

Kind.Checker.infer (Kind.Term.lam orig name body) =
  do Kind.Checker {
    ask ctx = Kind.Checker.get_context
    (Kind.Checker.fail (Kind.Error.cant_infer_lambda ctx orig))
  }

Kind.Checker.infer (Kind.Term.app orig func argm) =
  do Kind.Checker {
    ask subst    = Kind.Checker.get_subst
    ask func_typ = Kind.Checker.infer func
    (Kind.Term.if_all func_typ
      (func_orig => func_name => func_type => func_body =>
        do Kind.Checker {
          ask Kind.Checker.check argm func_type
          return (func_body (Kind.Term.eval argm))
        }
      )
      (do Kind.Checker {
        ask ctx = Kind.Checker.get_context
        (Kind.Checker.fail (Kind.Error.invalid_call ctx orig))
      }))
  }

Kind.Checker.infer (Kind.Term.let orig name expr body) =
  do Kind.Checker {
    ask dep      = Kind.Checker.get_depth
    ask expr_typ = Kind.Checker.infer expr
    ask body_typ = Kind.Checker.extended (Kind.Checker.infer (body (Kind.Term.var orig name dep))) name expr_typ [(Kind.Term.eval expr)]
    return body_typ
  }

Kind.Checker.infer (Kind.Term.ann orig expr type) =
  do Kind.Checker {
    let type = Kind.Term.eval type
    ask Kind.Checker.check expr type
    return type
  }

Kind.Checker.infer (Kind.Term.ct0 ctid orig) =
  Kind.Checker.pure (Kind.Term.eval (TypeOf ctid))

Kind.Checker.infer (Kind.Term.ct1 ctid orig x0) =
  Kind.Checker.infer (Kind.Term.app orig (Kind.Term.ct0 ctid orig) x0)

Kind.Checker.infer (Kind.Term.ct2 ctid orig x0 x1) =
  Kind.Checker.infer (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.ct0 ctid orig) x0) x1)

Kind.Checker.infer (Kind.Term.ct3 ctid orig x0 x1 x2) =
  Kind.Checker.infer (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.ct0 ctid orig) x0) x1) x2)

Kind.Checker.infer (Kind.Term.ct4 ctid orig x0 x1 x2 x3) =
  Kind.Checker.infer (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.ct0 ctid orig) x0) x1) x2) x3)

Kind.Checker.infer (Kind.Term.ct5 ctid orig x0 x1 x2 x3 x4) =
  Kind.Checker.infer (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.ct0 ctid orig) x0) x1) x2) x3) x4)

Kind.Checker.infer (Kind.Term.ct6 ctid orig x0 x1 x2 x3 x4 x5) =
  Kind.Checker.infer (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.ct0 ctid orig) x0) x1) x2) x3) x4) x5)

Kind.Checker.infer (Kind.Term.ct7 ctid orig args) =
  let expr = Kind.Checker.infer_args args
  Kind.Checker.infer (expr ctid orig)

Kind.Checker.infer (Kind.Term.ct8 ctid orig args) =
  let expr = Kind.Checker.infer_args args
  Kind.Checker.infer (expr ctid orig)

Kind.Checker.infer (Kind.Term.fn0 ctid orig) =
  Kind.Checker.pure (Kind.Term.eval (TypeOf ctid))

Kind.Checker.infer (Kind.Term.fn1 ctid orig x0) =
  Kind.Checker.infer (Kind.Term.app orig (Kind.Term.fn0 ctid orig) x0)

Kind.Checker.infer (Kind.Term.fn2 ctid orig x0 x1) =
  Kind.Checker.infer (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.fn0 ctid orig) x0) x1)

Kind.Checker.infer (Kind.Term.fn3 ctid orig x0 x1 x2) =
  Kind.Checker.infer (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.fn0 ctid orig) x0) x1) x2)

Kind.Checker.infer (Kind.Term.fn4 ctid orig x0 x1 x2 x3) =
  Kind.Checker.infer (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.fn0 ctid orig) x0) x1) x2) x3)

Kind.Checker.infer (Kind.Term.fn5 ctid orig x0 x1 x2 x3 x4) =
  Kind.Checker.infer (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.fn0 ctid orig) x0) x1) x2) x3) x4)

Kind.Checker.infer (Kind.Term.fn6 ctid orig x0 x1 x2 x3 x4 x5) =
  Kind.Checker.infer (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.fn0 ctid orig) x0) x1) x2) x3) x4) x5)

Kind.Checker.infer (Kind.Term.fn7 ctid orig args) =
  let expr = Kind.Checker.infer_args args
  Kind.Checker.infer (expr ctid orig)

Kind.Checker.infer (Kind.Term.fn8 ctid orig args) =
  let expr = Kind.Checker.infer_args args
  Kind.Checker.infer (expr ctid orig)

Kind.Checker.infer (Kind.Term.hlp orig) =
  do Kind.Checker {
    ask ctx = Kind.Checker.get_context
    (Kind.Checker.fail (Kind.Error.inspection ctx orig (Kind.Term.hlp 0)))
  }

Kind.Checker.infer (Kind.Term.u60 orig) =
  Kind.Checker.pure (Kind.Term.typ 0)

Kind.Checker.infer (Kind.Term.num orig numb) =
  Kind.Checker.pure (Kind.Term.u60 0)

Kind.Checker.infer (Kind.Term.op2 orig oper left right) =
  do Kind.Checker {
    ask Kind.Checker.check left  (Kind.Term.u60 0)
    ask Kind.Checker.check right (Kind.Term.u60 0)
    return Kind.Term.u60 0
  }
