Kind.API.check_function (fnid: U60): List (Kind.Result Unit)
Kind.API.check_function fnid =
  let rules = Kind.Axiom.rule_of fnid
  let type  = Kind.Axiom.type_of fnid
  let type_check = Kind.Checker.run (Kind.Checker.unify (Kind.Checker.check type (Kind.Term.typ 0))) Bool.true
  let rule_check = Kind.API.check_function.rules rules (Kind.Term.eval type)
  let result = List.cons type_check rule_check
  if Bool.or (Bool.not (Kind.Axiom.should_check fnid)) (List.any result (x => Kind.Result.has_error x)) {
    result
  } else {
    List.cons (Kind.Checker.run (Kind.Coverage.check_coverage fnid rules type) Bool.true) result
  }

Kind.API.check_function.rules (rules: List Kind.Rule) (type: Kind.Term): List (Kind.Result Unit)
Kind.API.check_function.rules (List.nil t)             type = List.nil
Kind.API.check_function.rules (List.cons t rule rules) type =
  let head = Kind.Checker.run (Kind.Checker.unify (Kind.Checker.rule rule type)) Bool.false
  let tail = Kind.API.check_function.rules rules type
  (List.cons head tail)

