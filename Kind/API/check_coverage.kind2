OrigOf (name: U60) : U60

Coverage : List U60

Family.ConstructorsOf (name: U60) : List U60

Constructor.TypeOf (name: U60) : Kind.Term
Constructor.CreatorOf (name: U60) : Kind.Coverage.Creator
Constructor.Compare (name: U60) (name_: U60) : Bool

Definition.TypeOf (name: U60)  : Kind.Term
Definition.RulesOf (name: U60) : List Kind.Rule

// Transforms a list of splitTrees and Function ids @fns@
// into a List of function ids and Errors
Kind.API.show_errors (fns: List (Pair Kind.SplitTree U60)) : List (Pair U60 Kind.Error)
Kind.API.show_errors List.nil           = List.nil
Kind.API.show_errors (List.cons t x xs) =
  let fnid  = Pair.snd x
  let orig_ = OrigOf fnid
  List.concat (List.map (Kind.SplitTree.to_errors orig_ fnid (Pair.fst x)) (x => Pair.new fnid x)) (Kind.API.show_errors xs)

Kind.API.output.show_errors (ls: List (Pair U60 Kind.Error)) : String
Kind.API.output.show_errors (List.nil t) = ""
Kind.API.output.show_errors (List.cons t err errs) =
  Kind.Printer.text [ (Kind.API.output.error (Pair.fst err) (Pair.snd err) Kind.Subst.end) String.new_line
                      (Kind.API.output.show_errors errs)
                    ]

Kind.API.check_coverage : String
Kind.API.check_coverage =
  let trees = Kind.API.check_coverages Coverage
  let output = Kind.API.output.show_errors (Kind.API.show_errors trees)
  if String.is_nil output {
    Kind.Printer.text ["All functions covering." String.new_line String.new_line ]
  } else {
    output
  }