// Evaluates an operation term.
Kind.Term.eval_op (orig: U60) (op: Kind.Operator) (left: Kind.Term) (right: Kind.Term): Kind.Term
Kind.Term.eval_op orig Kind.Operator.add (Kind.Term.num a.orig a.num) (Kind.Term.num b.orig b.num) = Kind.Term.num 0 (+  a.num b.num)
Kind.Term.eval_op orig Kind.Operator.sub (Kind.Term.num a.orig a.num) (Kind.Term.num b.orig b.num) = Kind.Term.num 0 (-  a.num b.num)
Kind.Term.eval_op orig Kind.Operator.mul (Kind.Term.num a.orig a.num) (Kind.Term.num b.orig b.num) = Kind.Term.num 0 (*  a.num b.num)
Kind.Term.eval_op orig Kind.Operator.div (Kind.Term.num a.orig a.num) (Kind.Term.num b.orig b.num) = Kind.Term.num 0 (/  a.num b.num)
Kind.Term.eval_op orig Kind.Operator.mod (Kind.Term.num a.orig a.num) (Kind.Term.num b.orig b.num) = Kind.Term.num 0 (%  a.num b.num)
Kind.Term.eval_op orig Kind.Operator.and (Kind.Term.num a.orig a.num) (Kind.Term.num b.orig b.num) = Kind.Term.num 0 (&  a.num b.num)
Kind.Term.eval_op orig Kind.Operator.or  (Kind.Term.num a.orig a.num) (Kind.Term.num b.orig b.num) = Kind.Term.num 0 (|  a.num b.num)
Kind.Term.eval_op orig Kind.Operator.xor (Kind.Term.num a.orig a.num) (Kind.Term.num b.orig b.num) = Kind.Term.num 0 (^  a.num b.num)
Kind.Term.eval_op orig Kind.Operator.shl (Kind.Term.num a.orig a.num) (Kind.Term.num b.orig b.num) = Kind.Term.num 0 (<< a.num b.num)
Kind.Term.eval_op orig Kind.Operator.shr (Kind.Term.num a.orig a.num) (Kind.Term.num b.orig b.num) = Kind.Term.num 0 (>> a.num b.num)
Kind.Term.eval_op orig Kind.Operator.ltn (Kind.Term.num a.orig a.num) (Kind.Term.num b.orig b.num) = Kind.Term.num 0 (<  a.num b.num)
Kind.Term.eval_op orig Kind.Operator.lte (Kind.Term.num a.orig a.num) (Kind.Term.num b.orig b.num) = Kind.Term.num 0 (<= a.num b.num)
Kind.Term.eval_op orig Kind.Operator.eql (Kind.Term.num a.orig a.num) (Kind.Term.num b.orig b.num) = Kind.Term.num 0 (== a.num b.num)
Kind.Term.eval_op orig Kind.Operator.gte (Kind.Term.num a.orig a.num) (Kind.Term.num b.orig b.num) = Kind.Term.num 0 (>= a.num b.num)
Kind.Term.eval_op orig Kind.Operator.gtn (Kind.Term.num a.orig a.num) (Kind.Term.num b.orig b.num) = Kind.Term.num 0 (>  a.num b.num)
Kind.Term.eval_op orig Kind.Operator.neq (Kind.Term.num a.orig a.num) (Kind.Term.num b.orig b.num) = Kind.Term.num 0 (!= a.num b.num)
Kind.Term.eval_op orig op                left                         right                        = Kind.Term.op2 orig op left right
