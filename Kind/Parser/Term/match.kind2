// Automatically derived from Kind/Parser/Term/_.type
Kind.Parser.Term.match (x: (Kind.Parser.Term)) -(p: (x: (Kind.Parser.Term)) Type) (typ: (orig: U60) (p (Kind.Parser.Term.typ orig))) (var: (orig: U60) (name: String) (p (Kind.Parser.Term.var orig name))) (all: (orig: U60) (name: String) (tipo: Kind.Parser.Term) (body: Kind.Parser.Term) (p (Kind.Parser.Term.all orig name tipo body))) (lam: (orig: U60) (name: String) (body: Kind.Parser.Term) (p (Kind.Parser.Term.lam orig name body))) (app: (orig: U60) (func: Kind.Parser.Term) (argm: Kind.Parser.Term) (p (Kind.Parser.Term.app orig func argm))) (let: (orig: U60) (name: String) (expr: Kind.Parser.Term) (body: Kind.Parser.Term) (p (Kind.Parser.Term.let orig name expr body))) (ann: (orig: U60) (expr: Kind.Parser.Term) (tipo: Kind.Parser.Term) (p (Kind.Parser.Term.ann orig expr tipo))) (ctr: (orig: U60) (name: String) (args: (List Kind.Parser.Term)) (p (Kind.Parser.Term.ctr orig name args))) (fun: (orig: U60) (name: String) (args: (List Kind.Parser.Term)) (p (Kind.Parser.Term.fun orig name args))) (hlp: (orig: U60) (p (Kind.Parser.Term.hlp orig))) (u60: (orig: U60) (p (Kind.Parser.Term.u60 orig))) (num: (orig: U60) (numb: U60) (p (Kind.Parser.Term.num orig numb))) (op2: (orig: U60) (oper: Kind.Parser.Oper) (val0: Kind.Parser.Term) (val1: Kind.Parser.Term) (p (Kind.Parser.Term.op2 orig oper val0 val1))) (hol: (orig: U60) (numb: U60) (p (Kind.Parser.Term.hol orig numb))) (mat: (orig: U60) (tipo: String) (name: String) (expr: Kind.Parser.Term) (cses: (List (Pair String Kind.Parser.Term))) (moti: Kind.Parser.Term) (p (Kind.Parser.Term.mat orig tipo name expr cses moti))) : (p x)
Kind.Parser.Term.match (Kind.Parser.Term.typ orig_) p typ var all lam app let ann ctr fun hlp u60 num op2 hol mat = (typ orig_)
Kind.Parser.Term.match (Kind.Parser.Term.var orig_ name_) p typ var all lam app let ann ctr fun hlp u60 num op2 hol mat = (var orig_ name_)
Kind.Parser.Term.match (Kind.Parser.Term.all orig_ name_ tipo_ body_) p typ var all lam app let ann ctr fun hlp u60 num op2 hol mat = (all orig_ name_ tipo_ body_)
Kind.Parser.Term.match (Kind.Parser.Term.lam orig_ name_ body_) p typ var all lam app let ann ctr fun hlp u60 num op2 hol mat = (lam orig_ name_ body_)
Kind.Parser.Term.match (Kind.Parser.Term.app orig_ func_ argm_) p typ var all lam app let ann ctr fun hlp u60 num op2 hol mat = (app orig_ func_ argm_)
Kind.Parser.Term.match (Kind.Parser.Term.let orig_ name_ expr_ body_) p typ var all lam app let ann ctr fun hlp u60 num op2 hol mat = (let orig_ name_ expr_ body_)
Kind.Parser.Term.match (Kind.Parser.Term.ann orig_ expr_ tipo_) p typ var all lam app let ann ctr fun hlp u60 num op2 hol mat = (ann orig_ expr_ tipo_)
Kind.Parser.Term.match (Kind.Parser.Term.ctr orig_ name_ args_) p typ var all lam app let ann ctr fun hlp u60 num op2 hol mat = (ctr orig_ name_ args_)
Kind.Parser.Term.match (Kind.Parser.Term.fun orig_ name_ args_) p typ var all lam app let ann ctr fun hlp u60 num op2 hol mat = (fun orig_ name_ args_)
Kind.Parser.Term.match (Kind.Parser.Term.hlp orig_) p typ var all lam app let ann ctr fun hlp u60 num op2 hol mat = (hlp orig_)
Kind.Parser.Term.match (Kind.Parser.Term.u60 orig_) p typ var all lam app let ann ctr fun hlp u60 num op2 hol mat = (u60 orig_)
Kind.Parser.Term.match (Kind.Parser.Term.num orig_ numb_) p typ var all lam app let ann ctr fun hlp u60 num op2 hol mat = (num orig_ numb_)
Kind.Parser.Term.match (Kind.Parser.Term.op2 orig_ oper_ val0_ val1_) p typ var all lam app let ann ctr fun hlp u60 num op2 hol mat = (op2 orig_ oper_ val0_ val1_)
Kind.Parser.Term.match (Kind.Parser.Term.hol orig_ numb_) p typ var all lam app let ann ctr fun hlp u60 num op2 hol mat = (hol orig_ numb_)
Kind.Parser.Term.match (Kind.Parser.Term.mat orig_ tipo_ name_ expr_ cses_ moti_) p typ var all lam app let ann ctr fun hlp u60 num op2 hol mat = (mat orig_ tipo_ name_ expr_ cses_ moti_)
