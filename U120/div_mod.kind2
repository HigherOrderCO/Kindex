// Returns the quocient and remainder of the integer division num/den
// Implemented as binary long division
U120.div_mod (num: U120) (den: U120) : Pair U120 U120
U120.div_mod num (U120.new 0 0) = Pair.new (U60.to_u120 (/ 0 0)) (U60.to_u120 (% 0 0))  // cause panic like in U60
U120.div_mod num den            =
  match Maybe msb = U120.msb num {
    none => Pair.new (U120.new 0 0) (U120.new 0 0) // numerator is 0
    some =>
      let qr  = (Pair.new (U120.new 0 0) (U120.new 0 0))
      let idx = U120.inc msb.value
      U120.div_mod.go idx qr num den
  }

U120.div_mod.go #U120_dm_go
  (idx : U120)
  (qr  : Pair U120 U120)
  (num : U120)
  (den : U120)
: Pair U120 U120
U120.div_mod.go (U120.new 0 0) qr num den = qr
U120.div_mod.go idx            qr num den =
  let quo = Pair.fst qr
  let rem = Pair.snd qr
  let rem = U120.shift_left rem (U120.new 0 1)
  // set lsb of rem to `bit` of num
  let bit = U120.dec idx
  let rem = U120.add rem (U120.get_bit num bit)

  let qr = if U120.greater_equal rem den {
    let quo = U120.set_bit quo bit
    let rem = U120.sub rem den
    Pair.new quo rem
  } else {
    Pair.new quo rem
  }
  (U120.div_mod.go (U120.dec idx) qr num den)

// The algorithm, from wikipedia
// if D = 0 then error(DivisionByZeroException) end
// Q := 0                  -- Initialize quotient and remainder to zero
// R := 0                     
// for i := n − 1 .. 0 do  -- Where n is number of bits in N
//   R := R << 1           -- Left-shift R by 1 bit
//   R(0) := N(i)          -- Set the least-significant bit of R equal to bit i of the numerator
//   if R ≥ D then
//     R := R − D
//     Q(i) := 1
//   end
// end