// Automatically derived from Term/_.type
Term.match (x: (Term)) -(p: (x: (Term)) Type) (typ: (orig: U60) (p (Term.typ orig))) (hol: (orig: U60) (number: U60) (p (Term.hol orig number))) (var: (orig: U60) (name: U60) (index: U60) (p (Term.var orig name index))) (all: (orig: U60) (name: U60) (typ: Term) (body: (_: Term) Term) (p (Term.all orig name typ body))) (lam: (orig: U60) (name: U60) (body: (_: Term) Term) (p (Term.lam orig name body))) (app: (orig: U60) (func: Term) (arg: Term) (p (Term.app orig func arg))) (let: (orig: U60) (name: U60) (expr: Term) (body: (_: Term) Term) (p (Term.let orig name expr body))) (ann: (orig: U60) (expr: Term) (typ: Term) (p (Term.ann orig expr typ))) (ct0: (ctid: U60) (orig: U60) (p (Term.ct0 ctid orig))) (ct1: (ctid: U60) (orig: U60) (x0: Term) (p (Term.ct1 ctid orig x0))) (ct2: (ctid: U60) (orig: U60) (x0: Term) (x1: Term) (p (Term.ct2 ctid orig x0 x1))) (ct3: (ctid: U60) (orig: U60) (x0: Term) (x1: Term) (x2: Term) (p (Term.ct3 ctid orig x0 x1 x2))) (ct4: (ctid: U60) (orig: U60) (x0: Term) (x1: Term) (x2: Term) (x3: Term) (p (Term.ct4 ctid orig x0 x1 x2 x3))) (ct5: (ctid: U60) (orig: U60) (x0: Term) (x1: Term) (x2: Term) (x3: Term) (x4: Term) (p (Term.ct5 ctid orig x0 x1 x2 x3 x4))) (ct6: (ctid: U60) (orig: U60) (x0: Term) (x1: Term) (x2: Term) (x3: Term) (x4: Term) (x5: Term) (p (Term.ct6 ctid orig x0 x1 x2 x3 x4 x5))) (ct7: (ctid: U60) (orig: U60) (x0: Term) (x1: Term) (x2: Term) (x3: Term) (x4: Term) (x5: Term) (x6: Term) (p (Term.ct7 ctid orig x0 x1 x2 x3 x4 x5 x6))) (ct8: (ctid: U60) (orig: U60) (x0: Term) (x1: Term) (x2: Term) (x3: Term) (x4: Term) (x5: Term) (x6: Term) (x7: Term) (p (Term.ct8 ctid orig x0 x1 x2 x3 x4 x5 x6 x7))) (fn0: (ctid: U60) (orig: U60) (p (Term.fn0 ctid orig))) (fn1: (ctid: U60) (orig: U60) (x0: Term) (p (Term.fn1 ctid orig x0))) (fn2: (ctid: U60) (orig: U60) (x0: Term) (x1: Term) (p (Term.fn2 ctid orig x0 x1))) (fn3: (ctid: U60) (orig: U60) (x0: Term) (x1: Term) (x2: Term) (p (Term.fn3 ctid orig x0 x1 x2))) (fn4: (ctid: U60) (orig: U60) (x0: Term) (x1: Term) (x2: Term) (x3: Term) (p (Term.fn4 ctid orig x0 x1 x2 x3))) (fn5: (ctid: U60) (orig: U60) (x0: Term) (x1: Term) (x2: Term) (x3: Term) (x4: Term) (p (Term.fn5 ctid orig x0 x1 x2 x3 x4))) (fn6: (ctid: U60) (orig: U60) (x0: Term) (x1: Term) (x2: Term) (x3: Term) (x4: Term) (x5: Term) (p (Term.fn6 ctid orig x0 x1 x2 x3 x4 x5))) (fn7: (ctid: U60) (orig: U60) (x0: Term) (x1: Term) (x2: Term) (x3: Term) (x4: Term) (x5: Term) (x6: Term) (p (Term.fn7 ctid orig x0 x1 x2 x3 x4 x5 x6))) (fn8: (ctid: U60) (orig: U60) (x0: Term) (x1: Term) (x2: Term) (x3: Term) (x4: Term) (x5: Term) (x6: Term) (x7: Term) (p (Term.fn8 ctid orig x0 x1 x2 x3 x4 x5 x6 x7))) (hlp: (orig: U60) (p (Term.hlp orig))) (u60: (orig: U60) (p (Term.u60 orig))) (num: (orig: U60) (num: U60) (p (Term.num orig num))) (op2: (orig: U60) (operator: Operator) (left: Term) (right: Term) (p (Term.op2 orig operator left right))) : (p x)
Term.match (Term.typ orig_) p typ hol var all lam app let ann ct0 ct1 ct2 ct3 ct4 ct5 ct6 ct7 ct8 fn0 fn1 fn2 fn3 fn4 fn5 fn6 fn7 fn8 hlp u60 num op2 = (typ orig_)
Term.match (Term.hol orig_ number_) p typ hol var all lam app let ann ct0 ct1 ct2 ct3 ct4 ct5 ct6 ct7 ct8 fn0 fn1 fn2 fn3 fn4 fn5 fn6 fn7 fn8 hlp u60 num op2 = (hol orig_ number_)
Term.match (Term.var orig_ name_ index_) p typ hol var all lam app let ann ct0 ct1 ct2 ct3 ct4 ct5 ct6 ct7 ct8 fn0 fn1 fn2 fn3 fn4 fn5 fn6 fn7 fn8 hlp u60 num op2 = (var orig_ name_ index_)
Term.match (Term.all orig_ name_ typ_ body_) p typ hol var all lam app let ann ct0 ct1 ct2 ct3 ct4 ct5 ct6 ct7 ct8 fn0 fn1 fn2 fn3 fn4 fn5 fn6 fn7 fn8 hlp u60 num op2 = (all orig_ name_ typ_ body_)
Term.match (Term.lam orig_ name_ body_) p typ hol var all lam app let ann ct0 ct1 ct2 ct3 ct4 ct5 ct6 ct7 ct8 fn0 fn1 fn2 fn3 fn4 fn5 fn6 fn7 fn8 hlp u60 num op2 = (lam orig_ name_ body_)
Term.match (Term.app orig_ func_ arg_) p typ hol var all lam app let ann ct0 ct1 ct2 ct3 ct4 ct5 ct6 ct7 ct8 fn0 fn1 fn2 fn3 fn4 fn5 fn6 fn7 fn8 hlp u60 num op2 = (app orig_ func_ arg_)
Term.match (Term.let orig_ name_ expr_ body_) p typ hol var all lam app let ann ct0 ct1 ct2 ct3 ct4 ct5 ct6 ct7 ct8 fn0 fn1 fn2 fn3 fn4 fn5 fn6 fn7 fn8 hlp u60 num op2 = (let orig_ name_ expr_ body_)
Term.match (Term.ann orig_ expr_ typ_) p typ hol var all lam app let ann ct0 ct1 ct2 ct3 ct4 ct5 ct6 ct7 ct8 fn0 fn1 fn2 fn3 fn4 fn5 fn6 fn7 fn8 hlp u60 num op2 = (ann orig_ expr_ typ_)
Term.match (Term.ct0 ctid_ orig_) p typ hol var all lam app let ann ct0 ct1 ct2 ct3 ct4 ct5 ct6 ct7 ct8 fn0 fn1 fn2 fn3 fn4 fn5 fn6 fn7 fn8 hlp u60 num op2 = (ct0 ctid_ orig_)
Term.match (Term.ct1 ctid_ orig_ x0_) p typ hol var all lam app let ann ct0 ct1 ct2 ct3 ct4 ct5 ct6 ct7 ct8 fn0 fn1 fn2 fn3 fn4 fn5 fn6 fn7 fn8 hlp u60 num op2 = (ct1 ctid_ orig_ x0_)
Term.match (Term.ct2 ctid_ orig_ x0_ x1_) p typ hol var all lam app let ann ct0 ct1 ct2 ct3 ct4 ct5 ct6 ct7 ct8 fn0 fn1 fn2 fn3 fn4 fn5 fn6 fn7 fn8 hlp u60 num op2 = (ct2 ctid_ orig_ x0_ x1_)
Term.match (Term.ct3 ctid_ orig_ x0_ x1_ x2_) p typ hol var all lam app let ann ct0 ct1 ct2 ct3 ct4 ct5 ct6 ct7 ct8 fn0 fn1 fn2 fn3 fn4 fn5 fn6 fn7 fn8 hlp u60 num op2 = (ct3 ctid_ orig_ x0_ x1_ x2_)
Term.match (Term.ct4 ctid_ orig_ x0_ x1_ x2_ x3_) p typ hol var all lam app let ann ct0 ct1 ct2 ct3 ct4 ct5 ct6 ct7 ct8 fn0 fn1 fn2 fn3 fn4 fn5 fn6 fn7 fn8 hlp u60 num op2 = (ct4 ctid_ orig_ x0_ x1_ x2_ x3_)
Term.match (Term.ct5 ctid_ orig_ x0_ x1_ x2_ x3_ x4_) p typ hol var all lam app let ann ct0 ct1 ct2 ct3 ct4 ct5 ct6 ct7 ct8 fn0 fn1 fn2 fn3 fn4 fn5 fn6 fn7 fn8 hlp u60 num op2 = (ct5 ctid_ orig_ x0_ x1_ x2_ x3_ x4_)
Term.match (Term.ct6 ctid_ orig_ x0_ x1_ x2_ x3_ x4_ x5_) p typ hol var all lam app let ann ct0 ct1 ct2 ct3 ct4 ct5 ct6 ct7 ct8 fn0 fn1 fn2 fn3 fn4 fn5 fn6 fn7 fn8 hlp u60 num op2 = (ct6 ctid_ orig_ x0_ x1_ x2_ x3_ x4_ x5_)
Term.match (Term.ct7 ctid_ orig_ x0_ x1_ x2_ x3_ x4_ x5_ x6_) p typ hol var all lam app let ann ct0 ct1 ct2 ct3 ct4 ct5 ct6 ct7 ct8 fn0 fn1 fn2 fn3 fn4 fn5 fn6 fn7 fn8 hlp u60 num op2 = (ct7 ctid_ orig_ x0_ x1_ x2_ x3_ x4_ x5_ x6_)
Term.match (Term.ct8 ctid_ orig_ x0_ x1_ x2_ x3_ x4_ x5_ x6_ x7_) p typ hol var all lam app let ann ct0 ct1 ct2 ct3 ct4 ct5 ct6 ct7 ct8 fn0 fn1 fn2 fn3 fn4 fn5 fn6 fn7 fn8 hlp u60 num op2 = (ct8 ctid_ orig_ x0_ x1_ x2_ x3_ x4_ x5_ x6_ x7_)
Term.match (Term.fn0 ctid_ orig_) p typ hol var all lam app let ann ct0 ct1 ct2 ct3 ct4 ct5 ct6 ct7 ct8 fn0 fn1 fn2 fn3 fn4 fn5 fn6 fn7 fn8 hlp u60 num op2 = (fn0 ctid_ orig_)
Term.match (Term.fn1 ctid_ orig_ x0_) p typ hol var all lam app let ann ct0 ct1 ct2 ct3 ct4 ct5 ct6 ct7 ct8 fn0 fn1 fn2 fn3 fn4 fn5 fn6 fn7 fn8 hlp u60 num op2 = (fn1 ctid_ orig_ x0_)
Term.match (Term.fn2 ctid_ orig_ x0_ x1_) p typ hol var all lam app let ann ct0 ct1 ct2 ct3 ct4 ct5 ct6 ct7 ct8 fn0 fn1 fn2 fn3 fn4 fn5 fn6 fn7 fn8 hlp u60 num op2 = (fn2 ctid_ orig_ x0_ x1_)
Term.match (Term.fn3 ctid_ orig_ x0_ x1_ x2_) p typ hol var all lam app let ann ct0 ct1 ct2 ct3 ct4 ct5 ct6 ct7 ct8 fn0 fn1 fn2 fn3 fn4 fn5 fn6 fn7 fn8 hlp u60 num op2 = (fn3 ctid_ orig_ x0_ x1_ x2_)
Term.match (Term.fn4 ctid_ orig_ x0_ x1_ x2_ x3_) p typ hol var all lam app let ann ct0 ct1 ct2 ct3 ct4 ct5 ct6 ct7 ct8 fn0 fn1 fn2 fn3 fn4 fn5 fn6 fn7 fn8 hlp u60 num op2 = (fn4 ctid_ orig_ x0_ x1_ x2_ x3_)
Term.match (Term.fn5 ctid_ orig_ x0_ x1_ x2_ x3_ x4_) p typ hol var all lam app let ann ct0 ct1 ct2 ct3 ct4 ct5 ct6 ct7 ct8 fn0 fn1 fn2 fn3 fn4 fn5 fn6 fn7 fn8 hlp u60 num op2 = (fn5 ctid_ orig_ x0_ x1_ x2_ x3_ x4_)
Term.match (Term.fn6 ctid_ orig_ x0_ x1_ x2_ x3_ x4_ x5_) p typ hol var all lam app let ann ct0 ct1 ct2 ct3 ct4 ct5 ct6 ct7 ct8 fn0 fn1 fn2 fn3 fn4 fn5 fn6 fn7 fn8 hlp u60 num op2 = (fn6 ctid_ orig_ x0_ x1_ x2_ x3_ x4_ x5_)
Term.match (Term.fn7 ctid_ orig_ x0_ x1_ x2_ x3_ x4_ x5_ x6_) p typ hol var all lam app let ann ct0 ct1 ct2 ct3 ct4 ct5 ct6 ct7 ct8 fn0 fn1 fn2 fn3 fn4 fn5 fn6 fn7 fn8 hlp u60 num op2 = (fn7 ctid_ orig_ x0_ x1_ x2_ x3_ x4_ x5_ x6_)
Term.match (Term.fn8 ctid_ orig_ x0_ x1_ x2_ x3_ x4_ x5_ x6_ x7_) p typ hol var all lam app let ann ct0 ct1 ct2 ct3 ct4 ct5 ct6 ct7 ct8 fn0 fn1 fn2 fn3 fn4 fn5 fn6 fn7 fn8 hlp u60 num op2 = (fn8 ctid_ orig_ x0_ x1_ x2_ x3_ x4_ x5_ x6_ x7_)
Term.match (Term.hlp orig_) p typ hol var all lam app let ann ct0 ct1 ct2 ct3 ct4 ct5 ct6 ct7 ct8 fn0 fn1 fn2 fn3 fn4 fn5 fn6 fn7 fn8 hlp u60 num op2 = (hlp orig_)
Term.match (Term.u60 orig_) p typ hol var all lam app let ann ct0 ct1 ct2 ct3 ct4 ct5 ct6 ct7 ct8 fn0 fn1 fn2 fn3 fn4 fn5 fn6 fn7 fn8 hlp u60 num op2 = (u60 orig_)
Term.match (Term.num orig_ num_) p typ hol var all lam app let ann ct0 ct1 ct2 ct3 ct4 ct5 ct6 ct7 ct8 fn0 fn1 fn2 fn3 fn4 fn5 fn6 fn7 fn8 hlp u60 num op2 = (num orig_ num_)
Term.match (Term.op2 orig_ operator_ left_ right_) p typ hol var all lam app let ann ct0 ct1 ct2 ct3 ct4 ct5 ct6 ct7 ct8 fn0 fn1 fn2 fn3 fn4 fn5 fn6 fn7 fn8 hlp u60 num op2 = (op2 orig_ operator_ left_ right_)
