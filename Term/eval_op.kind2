Term.eval_op (orig: U60) (op: Operator) (left: Term) (right: Term): Term
Term.eval_op orig Operator.add (Term.num a.orig a.num) (Term.num b.orig b.num) = (Term.num 0 (+  a.num b.num))
Term.eval_op orig Operator.sub (Term.num a.orig a.num) (Term.num b.orig b.num) = (Term.num 0 (-  a.num b.num))
Term.eval_op orig Operator.mul (Term.num a.orig a.num) (Term.num b.orig b.num) = (Term.num 0 (*  a.num b.num))
Term.eval_op orig Operator.div (Term.num a.orig a.num) (Term.num b.orig b.num) = (Term.num 0 (/  a.num b.num))
Term.eval_op orig Operator.mod (Term.num a.orig a.num) (Term.num b.orig b.num) = (Term.num 0 (%  a.num b.num))
Term.eval_op orig Operator.and (Term.num a.orig a.num) (Term.num b.orig b.num) = (Term.num 0 (&  a.num b.num))
Term.eval_op orig Operator.or  (Term.num a.orig a.num) (Term.num b.orig b.num) = (Term.num 0 (|  a.num b.num))
Term.eval_op orig Operator.xor (Term.num a.orig a.num) (Term.num b.orig b.num) = (Term.num 0 (^  a.num b.num))
Term.eval_op orig Operator.shl (Term.num a.orig a.num) (Term.num b.orig b.num) = (Term.num 0 (<< a.num b.num))
Term.eval_op orig Operator.shr (Term.num a.orig a.num) (Term.num b.orig b.num) = (Term.num 0 (>> a.num b.num))
Term.eval_op orig Operator.ltn (Term.num a.orig a.num) (Term.num b.orig b.num) = (Term.num 0 (<  a.num b.num))
Term.eval_op orig Operator.lte (Term.num a.orig a.num) (Term.num b.orig b.num) = (Term.num 0 (<= a.num b.num))
Term.eval_op orig Operator.eql (Term.num a.orig a.num) (Term.num b.orig b.num) = (Term.num 0 (== a.num b.num))
Term.eval_op orig Operator.gte (Term.num a.orig a.num) (Term.num b.orig b.num) = (Term.num 0 (>= a.num b.num))
Term.eval_op orig Operator.gtn (Term.num a.orig a.num) (Term.num b.orig b.num) = (Term.num 0 (>  a.num b.num))
Term.eval_op orig Operator.neq (Term.num a.orig a.num) (Term.num b.orig b.num) = (Term.num 0 (!= a.num b.num))
Term.eval_op orig op           left                    right                   = (Term.op2 orig op left right)
