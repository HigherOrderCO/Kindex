// From: https://www.youtube.com/watch?v=yZyx9gHhRXM

// A cat is represented by its position
Cat: Type {
  Pos
}

// A position can be one of 5 boxes
Pos: Type
  Box.0: Pos
  Box.1: Pos
  Box.2: Pos
  Box.3: Pos
  Box.4: Pos

// Every turn, the cat can move left or right
Move: Type
  Left  : Move
  Right : Move

// A cat has a pre-defined (but unknown) infinite list of moves
Moves: Type
  Moves.next (head: Move) (tail: Moves) : Moves

// A strategy is a sequence of positions where we will look for the cat
Strategy: Type {
  List Pos
}

// Two positions are equal if they're the same
Pos.equal (a: Pos) (b: Pos) : Bool
Pos.equal Box.0 Box.0 = Bool.true
Pos.equal Box.1 Box.1 = Bool.true
Pos.equal Box.2 Box.2 = Bool.true
Pos.equal Box.3 Box.3 = Bool.true
Pos.equal Box.4 Box.4 = Bool.true
Pos.equal a     b     = Bool.false

// Moves a cat to the next position
Move.apply (move: Move) (cat: Cat) : Cat
Move.apply Left  Box.0 = Box.1
Move.apply Right Box.0 = Box.1
Move.apply Left  Box.1 = Box.0
Move.apply Right Box.1 = Box.2
Move.apply Left  Box.2 = Box.1
Move.apply Right Box.2 = Box.3
Move.apply Left  Box.3 = Box.2
Move.apply Right Box.3 = Box.4
Move.apply Left  Box.4 = Box.3
Move.apply Right Box.4 = Box.3

// Every turn, we open a box.
// If the cat is there, we win, 
// Otherwise, the cat moves to an adjacent box.
// If we're out of moves, we lose.
Play (cat: Cat) (moves: Moves) (strat: List Pos) : Bool
Play cat (Moves.next move moves) List.nil = Bool.false
Play cat (Moves.next move moves) (List.cons open strat) =
  if Pos.equal cat open {
    Bool.true
  } else {
    Play (Move.apply move cat) moves strat
  }

// Theorem: for every any cat position, and for any possible path
// that the cat takes, there is a strategy that finds the cat.
WinningStrategy (cat: Pos) (moves: Moves) : [strat: Strategy] (Equal Bool (Play cat moves strat) Bool.true) {
  ?
}

// Next level: proving that WinningStrategy is optimal
