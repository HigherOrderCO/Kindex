String.pop_while (xs: String) (cond: Char -> Bool) : Pair String String {
  let res = String.pop_while.go xs cond (Function.id String)
  let str = (x: (_: String) -> String) => (x "")
  Pair.map_fst res str
}

String.pop_while.go (xs: String) (cond: Char -> Bool) (res: (_: String) -> String) : Pair ((_: String) -> String) String
String.pop_while.go  String.nil        cond res = Pair.new res String.nil
String.pop_while.go (String.cons x xs) cond res =
  if cond x {
    let res = (y: String) => res (String.cons x y)
    String.pop_while.go xs cond res
  } else {
    Pair.new res (String.cons x xs)
  }