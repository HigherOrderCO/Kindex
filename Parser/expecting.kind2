// If the given parser fails, replace its error by "Expected `name`", where name is the given value.
// Marks the initial error index as the one before running the given parser,
// and the last error index as the one in the error coming from the given parser.
Parser.expecting <a> (prs: Parser a) (name: String) : Parser a {
  state =>
    match Parser.State state {
      new =>
        let state = Parser.State.new state.left state.back state.index
        // init from the state index before running parser
        let init  = state.index
        match Parser.Result r = (prs state) {
          done =>
            // If parser succeeds, just return the result without changing anything
            Parser.Result.done r.state r.result
          fail =>
            // On fail, insert err msg and mark the err range
            let msg  = String.concat "Expected " name
            match Parser.Error r.error {
              new =>
                // last from the incoming error
                let last  = r.error.last
                let error = Parser.Error.new msg init last
                Parser.Result.fail r.state error
            }
        }
    }
}