LambdaVar : Type
LambdaVar.new (name: String) : LambdaVar

LambdaTerm : Type
LambdaTerm.var (name : LambdaVar )                     : LambdaTerm
LambdaTerm.abs (lam  : LambdaVar ) (body : LambdaTerm) : LambdaTerm
LambdaTerm.app (head : LambdaTerm) (body : LambdaTerm) : LambdaTerm

Parser.lambda_term : Parser LambdaTerm {
  let parsers = [
    Parser.lambda_term.var
    Parser.lambda_term.abs
    Parser.lambda_term.app
  ]
  Parser.first_of parsers
}

// Lambda calculus variable
// alpha+
Parser.lambda_var : Parser LambdaVar {
  let p_name = Parser.take_while1 (c => Char.is_alpha c)
  let f_var  = (name: String) => LambdaVar.new name
  Parser.map f_var p_name
}

Parser.lambda_term.var : Parser LambdaTerm {
  let p_var  = Parser.lambda_var
  let f_term = (name: LambdaVar) => LambdaTerm.var name
  Parser.map f_term p_var
}

// Lambda calculus abstracion
// "@" var "." term
Parser.lambda_term.abs : Parser LambdaTerm {
  do Parser {
    ask Parser.string "@"
    ask lam  = Parser.lambda_var
    ask Parser.string "."
    ask body = Parser.lambda_term
    return LambdaTerm.abs lam body
  }
}

// Lambda calculus application
// "(" term " " term ")"
Parser.lambda_term.app : Parser LambdaTerm {
  do Parser {
    ask Parser.string "("
    ask head = Parser.lambda_term
    ask Parser.string " "
    ask body = Parser.lambda_term
    ask Parser.string ")"
    return LambdaTerm.app head body
  }
}

Parser.lambda_calc_parser {
  let inp = "(@bo.(a @c.c) b)"
  let par = Parser.lambda_term
  Parser.run par inp
}

Main {
  Parser.lambda_calc_parser
}