// Returns the first parser that succeeds
// Backtracks after each failed parser
// Fails if no parsers succeed
Parser.first_of <a> <t> (parsers: List (Parser t a)) : Parser t a
Parser.first_of (List.nil  la)           = Parser.empty
Parser.first_of (List.cons la head tail) = 
  do Parser {
    ask ma = Parser.try head
    match Maybe ma {
      none => Parser.first_of tail
      some => Parser.pure ma.value
    }
  }
