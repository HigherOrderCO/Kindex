// Automatically derived from Operator/_.type
Operator.match (x: (Operator)) -(p: (x: (Operator)) Type) (add: (p (Operator.add))) (sub: (p (Operator.sub))) (mul: (p (Operator.mul))) (div: (p (Operator.div))) (mod: (p (Operator.mod))) (and: (p (Operator.and))) (or: (p (Operator.or))) (xor: (p (Operator.xor))) (shl: (p (Operator.shl))) (shr: (p (Operator.shr))) (ltn: (p (Operator.ltn))) (lte: (p (Operator.lte))) (eql: (p (Operator.eql))) (gte: (p (Operator.gte))) (gtn: (p (Operator.gtn))) (neq: (p (Operator.neq))) : (p x)
Operator.match (Operator.add) p add sub mul div mod and or xor shl shr ltn lte eql gte gtn neq = (add)
Operator.match (Operator.sub) p add sub mul div mod and or xor shl shr ltn lte eql gte gtn neq = (sub)
Operator.match (Operator.mul) p add sub mul div mod and or xor shl shr ltn lte eql gte gtn neq = (mul)
Operator.match (Operator.div) p add sub mul div mod and or xor shl shr ltn lte eql gte gtn neq = (div)
Operator.match (Operator.mod) p add sub mul div mod and or xor shl shr ltn lte eql gte gtn neq = (mod)
Operator.match (Operator.and) p add sub mul div mod and or xor shl shr ltn lte eql gte gtn neq = (and)
Operator.match (Operator.or) p add sub mul div mod and or xor shl shr ltn lte eql gte gtn neq = (or)
Operator.match (Operator.xor) p add sub mul div mod and or xor shl shr ltn lte eql gte gtn neq = (xor)
Operator.match (Operator.shl) p add sub mul div mod and or xor shl shr ltn lte eql gte gtn neq = (shl)
Operator.match (Operator.shr) p add sub mul div mod and or xor shl shr ltn lte eql gte gtn neq = (shr)
Operator.match (Operator.ltn) p add sub mul div mod and or xor shl shr ltn lte eql gte gtn neq = (ltn)
Operator.match (Operator.lte) p add sub mul div mod and or xor shl shr ltn lte eql gte gtn neq = (lte)
Operator.match (Operator.eql) p add sub mul div mod and or xor shl shr ltn lte eql gte gtn neq = (eql)
Operator.match (Operator.gte) p add sub mul div mod and or xor shl shr ltn lte eql gte gtn neq = (gte)
Operator.match (Operator.gtn) p add sub mul div mod and or xor shl shr ltn lte eql gte gtn neq = (gtn)
Operator.match (Operator.neq) p add sub mul div mod and or xor shl shr ltn lte eql gte gtn neq = (neq)
