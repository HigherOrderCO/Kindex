Data.BaseTree.set #Bt_set <v: Type> (bases: List Data.BaseTree.Base) (key: Data.BaseTree.Key bases) (map: Data.BaseTree bases v) (val: v): Data.BaseTree bases v
// tip
Data.BaseTree.set v (List.nil t) Unit.new end val = val
// Base 2
Data.BaseTree.set v (List.cons b.t Data.BaseTree.Base.2 bs) (Data.BaseTree.Base.Bin.0 k.t ks) (Data.BaseTree.Bin.tie m.t b0 b1) val =
  Data.BaseTree.Bin.tie m.t (Data.BaseTree.set v bs ks b0 val) b1
Data.BaseTree.set v (List.cons b.t Data.BaseTree.Base.2 bs) (Data.BaseTree.Base.Bin.1 k.t ks) (Data.BaseTree.Bin.tie m.t b0 b1) val =
  Data.BaseTree.Bin.tie m.t b0 (Data.BaseTree.set v bs ks b1 val)
// Base 5
Data.BaseTree.set v (List.cons b.t Data.BaseTree.Base.5 bs) (Data.BaseTree.Base.Qui.0 k.t ks) (Data.BaseTree.Qui.tie m.t b0 b1 b2 b3 b4) val =
  Data.BaseTree.Qui.tie m.t (Data.BaseTree.set v bs ks b0 val) b1 b2 b3 b4
Data.BaseTree.set v (List.cons b.t Data.BaseTree.Base.5 bs) (Data.BaseTree.Base.Qui.1 k.t ks) (Data.BaseTree.Qui.tie m.t b0 b1 b2 b3 b4) val =
  Data.BaseTree.Qui.tie m.t b0 (Data.BaseTree.set v bs ks b1 val) b2 b3 b4
Data.BaseTree.set v (List.cons b.t Data.BaseTree.Base.5 bs) (Data.BaseTree.Base.Qui.2 k.t ks) (Data.BaseTree.Qui.tie m.t b0 b1 b2 b3 b4) val =
  Data.BaseTree.Qui.tie m.t b0 b1 (Data.BaseTree.set v bs ks b2 val) b3 b4
Data.BaseTree.set v (List.cons b.t Data.BaseTree.Base.5 bs) (Data.BaseTree.Base.Qui.3 k.t ks) (Data.BaseTree.Qui.tie m.t b0 b1 b2 b3 b4) val =
  Data.BaseTree.Qui.tie m.t b0 b1 b2 (Data.BaseTree.set v bs ks b3 val) b4
Data.BaseTree.set v (List.cons b.t Data.BaseTree.Base.5 bs) (Data.BaseTree.Base.Qui.4 k.t ks) (Data.BaseTree.Qui.tie m.t b0 b1 b2 b3 b4) val =
  Data.BaseTree.Qui.tie m.t b0 b1 b2 b3 (Data.BaseTree.set v bs ks b4 val)