Data.BaseTree.Key.from_u60.base5 (t: List Data.BaseTree.Base) (q: U60) (m: U60) (n: U60) : Data.BaseTree.Base.Qui (Data.BaseTree.Key t)
Data.BaseTree.Key.from_u60.base5 t 0 m n = Data.BaseTree.Base.Qui.0 (Data.BaseTree.Key t) (Data.BaseTree.Key.from_u60 t m n)
Data.BaseTree.Key.from_u60.base5 t 1 m n = Data.BaseTree.Base.Qui.1 (Data.BaseTree.Key t) (Data.BaseTree.Key.from_u60 t m n)
Data.BaseTree.Key.from_u60.base5 t 2 m n = Data.BaseTree.Base.Qui.2 (Data.BaseTree.Key t) (Data.BaseTree.Key.from_u60 t m n)
Data.BaseTree.Key.from_u60.base5 t 3 m n = Data.BaseTree.Base.Qui.3 (Data.BaseTree.Key t) (Data.BaseTree.Key.from_u60 t m n)
Data.BaseTree.Key.from_u60.base5 t 4 m n = Data.BaseTree.Base.Qui.4 (Data.BaseTree.Key t) (Data.BaseTree.Key.from_u60 t m n)

Data.BaseTree.Key.from_u60.base2 (t: List Data.BaseTree.Base) (q: U60) (m: U60) (n: U60) : Data.BaseTree.Base.Bin (Data.BaseTree.Key t)
Data.BaseTree.Key.from_u60.base2 t 0 m n = Data.BaseTree.Base.Bin.0 (Data.BaseTree.Key t) (Data.BaseTree.Key.from_u60 t m n)
Data.BaseTree.Key.from_u60.base2 t 1 m n = Data.BaseTree.Base.Bin.1 (Data.BaseTree.Key t) (Data.BaseTree.Key.from_u60 t m n)

Data.BaseTree.Key.from_u60 (bases: List Data.BaseTree.Base) (m: U60) (n: U60): Data.BaseTree.Key bases
Data.BaseTree.Key.from_u60 (List.nil u)                        m n = Unit.new
Data.BaseTree.Key.from_u60 (List.cons u Data.BaseTree.Base.2 t) m n =
  let m = (/ m 2)
  let d = (/ n m)
  let n = (- n (* d m))
  Data.BaseTree.Key.from_u60.base2 t d m n
Data.BaseTree.Key.from_u60 (List.cons u Data.BaseTree.Base.5 t) m n =
  let m = (/ m 5)
  let d = (/ n m)
  let n = (- n (* d m))
  Data.BaseTree.Key.from_u60.base5 t d m n
