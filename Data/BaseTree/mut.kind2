Data.BaseTree.mut #Bt_mut <val: Type> (bases : List Data.BaseTree.Base) (map : Data.BaseTree bases val) (key : Data.BaseTree.Key bases) (func : val -> val) : Data.BaseTree bases val
  // Last Branch
Data.BaseTree.mut val (List.nil Data.BaseTree.Base) end unit func =
  func end
  // Base 2 Branch
Data.BaseTree.mut val (List.cons Data.BaseTree.Base Data.BaseTree.Base.2 tail) (Data.BaseTree.Bin.tie v2 b0 b1) (Data.BaseTree.Base.Bin.0 r key) func =
  Data.BaseTree.Bin.tie _ (Data.BaseTree.mut val tail b0 key func) b1
Data.BaseTree.mut val (List.cons Data.BaseTree.Base Data.BaseTree.Base.2 tail) (Data.BaseTree.Bin.tie v2 b0 b1) (Data.BaseTree.Base.Bin.1 r key) func =
  Data.BaseTree.Bin.tie _ b0 (Data.BaseTree.mut val tail b1 key func)
  // Base 5 Branch
Data.BaseTree.mut val (List.cons Data.BaseTree.Base Data.BaseTree.Base.5 tail) (Data.BaseTree.Qui.tie v2 b0 b1 b2 b3 b4) (Data.BaseTree.Base.Qui.0 r key) func =
  Data.BaseTree.Qui.tie _ (Data.BaseTree.mut val tail b0 key func) b1 b2 b3 b4
Data.BaseTree.mut val (List.cons Data.BaseTree.Base Data.BaseTree.Base.5 tail) (Data.BaseTree.Qui.tie v2 b0 b1 b2 b3 b4) (Data.BaseTree.Base.Qui.1 r key) func =
  Data.BaseTree.Qui.tie _ b0 (Data.BaseTree.mut val tail b1 key func) b2 b3 b4
Data.BaseTree.mut val (List.cons Data.BaseTree.Base Data.BaseTree.Base.5 tail) (Data.BaseTree.Qui.tie v2 b0 b1 b2 b3 b4) (Data.BaseTree.Base.Qui.2 r key) func =
  Data.BaseTree.Qui.tie _ b0 b1 (Data.BaseTree.mut val tail b2 key func) b3 b4
Data.BaseTree.mut val (List.cons Data.BaseTree.Base Data.BaseTree.Base.5 tail) (Data.BaseTree.Qui.tie v2 b0 b1 b2 b3 b4) (Data.BaseTree.Base.Qui.3 r key) func =
  Data.BaseTree.Qui.tie _ b0 b1 b2 (Data.BaseTree.mut val tail b3 key func) b4
Data.BaseTree.mut val (List.cons Data.BaseTree.Base Data.BaseTree.Base.5 tail) (Data.BaseTree.Qui.tie v2 b0 b1 b2 b3 b4) (Data.BaseTree.Base.Qui.4 r key) func =
  Data.BaseTree.Qui.tie _ b0 b1 b2 b3 (Data.BaseTree.mut val tail b4 key func)

