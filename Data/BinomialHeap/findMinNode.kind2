// Finds the node which contains the minimal value of the heap
// Maybe returns the rank and root (key) of the node
Data.BinomialHeap.findMinNode (pq: Data.BinomialHeap) : Maybe (Pair U60 U60)
Data.BinomialHeap.findMinNode (List.nil  t     ) = Maybe.none
Data.BinomialHeap.findMinNode (List.cons t x xs) =
  Maybe.some (Data.BinomialHeap.findMinNode.aux xs (Data.BinomialHeap.Node.rank_root x))

Data.BinomialHeap.findMinNode.aux (pq: Data.BinomialHeap) (pair: (Pair U60 U60)) : (Pair U60 U60)
Data.BinomialHeap.findMinNode.aux (List.nil  t     ) min_pair = min_pair
Data.BinomialHeap.findMinNode.aux (List.cons t x xs) min_pair =
  (Pair.get (Data.BinomialHeap.Node.rank_root x) (x_rank => x_root =>
  (Data.BinomialHeap.findMinNode.aux2 (U60.less_than x_root (Pair.fst min_pair)) xs min_pair (Pair.new x_rank x_root))))

Data.BinomialHeap.findMinNode.aux2 (b: Bool) (xs: Data.BinomialHeap) (min: (Pair U60 U60)) (x: (Pair U60 U60)) : (Pair U60 U60)
Data.BinomialHeap.findMinNode.aux2 Bool.true  xs min_pair x_pair = (Data.BinomialHeap.findMinNode.aux xs   x_pair)
Data.BinomialHeap.findMinNode.aux2 Bool.false xs min_pair x_pair = (Data.BinomialHeap.findMinNode.aux xs min_pair)
