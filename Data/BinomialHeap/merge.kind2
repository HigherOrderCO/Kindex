// Merge together two heaps
Data.BinomialHeap.merge (pq1: Data.BinomialHeap) (pq2: Data.BinomialHeap) : Data.BinomialHeap
Data.BinomialHeap.merge pq (List.nil t) = pq
Data.BinomialHeap.merge (List.nil t) pq = pq
Data.BinomialHeap.merge (List.cons t1 x xs) (List.cons t2 y ys) =
  (Pair.get (Data.BinomialHeap.Node.rank_copy x) (x_rank => x_copy =>
  (Pair.get (Data.BinomialHeap.Node.rank_copy y) (y_rank => y_copy =>
  (Data.BinomialHeap.merge.aux
    (U60.spaceship x_rank y_rank)
    (Data.BinomialHeap.cons x_copy xs)
    (Data.BinomialHeap.cons y_copy ys)
  )))))

Data.BinomialHeap.merge.aux (c: Cmp) (xs: Data.BinomialHeap) (ys: Data.BinomialHeap): Data.BinomialHeap
Data.BinomialHeap.merge.aux Cmp.ltn (List.cons t x xs) ys =
  (Data.BinomialHeap.cons x (Data.BinomialHeap.merge xs ys))
Data.BinomialHeap.merge.aux Cmp.gtn xs (List.cons t y ys) =
  (Data.BinomialHeap.cons y (Data.BinomialHeap.merge xs ys))
Data.BinomialHeap.merge.aux Cmp.eql (List.cons t1 x xs) (List.cons t2 y ys) =
  (InsertTree (Data.BinomialHeap.Node.link x y) (Data.BinomialHeap.merge xs ys))

// Inserts a Tree into the heap
// P.S.: Do not call it manually, you could break the heap structure
InsertTree (new: Data.BinomialHeap.Node) (pq: Data.BinomialHeap) : Data.BinomialHeap

InsertTree node (List.nil t) =
  Data.BinomialHeap.cons node Data.BinomialHeap.nil

InsertTree (Data.BinomialHeap.Node.new new_rank new_root new_child) (List.cons t (Data.BinomialHeap.Node.new x_rank x_root x_child) xs) =
  let node = (Data.BinomialHeap.Node.new new_rank new_root new_child)
  let heap = (List.cons t (Data.BinomialHeap.Node.new x_rank x_root x_child) xs)
  InsertTree.aux (U60.less_than new_rank x_rank) node heap

InsertTree.aux (b: Bool) (new: Data.BinomialHeap.Node) (xs: Data.BinomialHeap) : Data.BinomialHeap
InsertTree.aux Bool.true  new  xs                = Data.BinomialHeap.cons new xs
InsertTree.aux Bool.false new (List.cons t x xs) = InsertTree (Data.BinomialHeap.Node.link new x) xs
