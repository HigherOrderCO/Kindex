// Merges two trees. Merge is called recursively on the right subtree of the tree with 
// the smallest element and the other tree. MakeT is a helper function which swaps two
// sibling trees to maintain the leftist property
Data.LeftistHeap.merge (h1: Data.LeftistHeap) (h2: Data.LeftistHeap) : Data.LeftistHeap
Data.LeftistHeap.merge h Data.LeftistHeap.empty = h
Data.LeftistHeap.merge Data.LeftistHeap.empty h = h
Data.LeftistHeap.merge (Data.LeftistHeap.tree r1 x a1 b1) (Data.LeftistHeap.tree r2 y a2 b2) =
  (Data.LeftistHeap.merge.aux (< x y) (Data.LeftistHeap.tree r1 x a1 b1) (Data.LeftistHeap.tree r2 y a2 b2))

Data.LeftistHeap.merge.aux (b: U60) (h1: Data.LeftistHeap) (h2:Data.LeftistHeap) : Data.LeftistHeap
Data.LeftistHeap.merge.aux 1 (Data.LeftistHeap.tree r1 x a1 b1) (Data.LeftistHeap.tree r2 y a2 b2) =
  (Data.LeftistHeap.makeT x a1 (Data.LeftistHeap.merge b1 (Data.LeftistHeap.tree r2 y a2 b2)))
Data.LeftistHeap.merge.aux 0 (Data.LeftistHeap.tree r1 x a1 b1) (Data.LeftistHeap.tree r2 y a2 b2) =
  (Data.LeftistHeap.makeT y a2 (Data.LeftistHeap.merge (Data.LeftistHeap.tree r1 x a1 b1) b2))

// Helper function to Merge. Creates a tree and swaps the subtrees if needed to 
// maintain the leftist property. 
Data.LeftistHeap.makeT (x: U60) (a: Data.LeftistHeap) (b: Data.LeftistHeap) : Data.LeftistHeap
Data.LeftistHeap.makeT x a b = (Data.LeftistHeap.makeT.aux (>= (Data.LeftistHeap.rank a) (Data.LeftistHeap.rank b)) x a b)

Data.LeftistHeap.makeT.aux (b: U60) (x: U60) (a: Data.LeftistHeap) (b:Data.LeftistHeap) : Data.LeftistHeap
Data.LeftistHeap.makeT.aux 1 x a b = (Data.LeftistHeap.tree (+ (Data.LeftistHeap.rank b) 1) x a b)
Data.LeftistHeap.makeT.aux 0 x a b = (Data.LeftistHeap.tree (+ (Data.LeftistHeap.rank a) 1) x b a)
