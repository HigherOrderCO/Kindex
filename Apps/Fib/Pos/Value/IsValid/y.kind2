// For every x y, if x < 160 and y < 160: (((y << 8) | x) >> 8) < 160
Apps.Fib.Pos.Value.IsValid.y #Fib_pos_vivy (x: U120) (y: U120) (e0: Equal Bool (U120.less_than x (U120.new 0 160)) Bool.true) (e1: Equal Bool (U120.less_than y (U120.new 0 160)) Bool.true ): Equal Bool (U120.less_than (U120.shift_right (U120.bitwise_or (U120.shift_left y (U120.new 0 8)) x) (U120.new 0 8)) (U120.new 0 160)) Bool.true {
  let e2   = U120.IsLessThan.chain.less_than x (U120.new 0 160) (U120.new 0 256) e0 (Equal.refl Bool (U120.less_than (U120.new 0 160) (U120.new 0 256)))
  let e3   = U120.shift_right.zero_if_less_equal_length x (U120.new 0 8) e2
  let e4   = U120.shift_right.pass_or (U120.shift_left y (U120.new 0 8)) x (U120.new 0 8)
  let e4.1 = Equal.rewrite e3 (k => Equal U120 (U120.shift_right (U120.bitwise_or (U120.shift_left y (U120.new 0 8)) x) (U120.new 0 8)) (U120.bitwise_or (U120.shift_right (U120.shift_left y (U120.new 0 8)) (U120.new 0 8)) k)) e4
  let e5   = U120.or.zero_right (U120.shift_right (U120.shift_left y (U120.new 0 8)) (U120.new 0 8))
  let e4.2 = Equal.rewrite e5 (k => Equal U120 (U120.shift_right (U120.bitwise_or (U120.shift_left y (U120.new 0 8)) x) (U120.new 0 8)) k ) e4.1
  let e6   = U120.shift_right.shl_less_equal y (U120.new 0 8)
  let e7   = U120.IsLessEqual.chain.less_than (U120.shift_right (U120.shift_left y (U120.new 0 8)) (U120.new 0 8)) y (U120.new 0 160) e6 e1
  let e7.1 = Equal.rewrite (Equal.mirror e4.2) (k => Equal Bool (U120.less_than k (U120.new 0 160)) Bool.true ) e7
  e7.1
}