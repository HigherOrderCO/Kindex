use Apps.Kind.Loader as Loader
use Apps.Kind.SyntaxTree.Concrete.Module as Module
use Apps.Kind.Parser as KParser
use Data.String.Parser as Parser
use Data.Pair as Pair

//! Loads a kind file, returning the parsed module or an error, as well as the file id
Loader/read_module (path: Data.Path) : Loader/ (Data.Pair (Data.Either Parser/Error Module/) Data.U60) {
  do Loader/ {
    let cont = (code: Data.String) => do Loader/ {
      ask file_id = Loader/get_file_id
      let custom = KParser/State.new file_id
      let state = Parser/State.new custom code "" 0
      let res = (KParser/module) state
      let Pair/new (fst=state) (snd=res) = match Parser/Result res {
        done state result => Pair/new state (Data.Either.right result)
        fail state error => Pair/new state (Data.Either.left error)
      }
      let Parser/State.new custom left back index = state
      let code = Data.String.reverse_over back left
      Loader/add_file code path
      return Data.Pair.new res file_id
    }
    Apps.HVM.load path cont
  }
}
