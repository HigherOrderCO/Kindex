use Apps.Kind.Loader as Loader
use Apps.Kind.SyntaxTree.Concrete.ToSugared as ToSugared

//! Loads a kind file and its dependencies
Loader/load_module (path: Data.Path) : Loader/ Data.Unit {
  do Loader/ {
    ask Data.Pair.new (fst=module) (snd=file_id) = Loader/read_module path
    match Data.Either module {
      right (val=module) => match Data.Either book = (ToSugared/run module) {
        left (val=errs) => Loader/add_err (Loader/Error.tosugar_err errs)
        right (val=book) => do Loader/ {
          ask new_decls = Loader/add_book book
          ask unbounds = Loader/check_unbounds new_decls
          Loader/load_unbounds unbounds
        }
      }
      left (val=err) => do Loader/ {
        (Loader/add_err (Loader/Error.parse_err err file_id))
      }
    }
  }
}