use Apps.Kind.Loader as Loader
use Apps.Kind.SyntaxTree.Sugared.Declaration as Declaration
use Apps.Kind.SyntaxTree.CtrName as CtrName
use Data.Maybe as Maybe

Loader/take_decl (name: CtrName/) : Loader/ (Maybe/ Declaration/)
Loader/take_decl (CtrName/new range name) = state => Loader/take_decl.go name

Loader/take_decl.go (state: Loader/State) (name: Data.String) : Loader/Result (Maybe/ Declaration/)
Loader/take_decl.go (Loader/State.new (Book/new decls n_decls names) crnt_id files loaded errs) name =
  let Data.Pair.new (fst=names) (snd=decl_id) = Data.HashMap.got names name
  let Data.Pair.new (fst=decls) (snd=decl) = match Maybe/ decl_id {
    some (value=decl_id) => Data.Map.take decls decl_id
    none => Data.Pair.new decls Maybe/none
  }
  let state = (Loader/State.new (Book/new decls n_decls names) crnt_id files loaded errs)
  Loader/Result.new decl state
