use Apps.Kind.Loader as Loader
use Apps.Kind.SyntaxTree.CtrName as CtrName
use Data.List as List

//! Checks for any unbound constructors.
//! Returns unbound functions that need to be loaded.
//! Receives a list of declarations to check for unbounds.
Loader/check_unbounds (decl_ids: List/ Data.U60) : Loader/ (List/ CtrName/) {
  Loader/check_unbounds.go decl_ids []
}

Loader/check_unbounds.go (decl_ids: List/ Data.U60) (unbounds: List/ (List/ CtrName/)) : Loader/ (List/ CtrName/)
Loader/check_unbounds.go (List/cons decl_id decl_ids) unbounds = do Loader/ {
  ask decl = Loader/take_decl decl_id
  ask head = match Data.Maybe decl {
    some (value=decl) => do Loader/ {
      ask Data.Pair.new (fst=decl) (snd=unbounds) = Loader/unbound.decl decl
      Loader/set_decl decl decl_id
      return unbounds
    }
    none => do Loader/ {
      Loader/add_err (Loader/Error.internal "check_unbounds key")
      return []
    }
  }
  let unbounds = List/cons head unbounds
  Loader/check_unbounds.go decl_ids unbounds
}
Loader/check_unbounds.go (List/nil) unbounds = Loader/pure (List/flatten unbounds)