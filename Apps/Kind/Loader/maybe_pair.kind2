use Apps.Kind.Loader as Loader
use Data.Maybe as Maybe

//! Applies equivalent of Maybe.default to x, but returning the original and encapsulated by Loader
Loader/maybe_pair <t> (x: Maybe/ t) (dflt: r) (pass: t -> (Loader/ (Data.Pair t r))) : Loader/ (Data.Pair (Maybe/ t) r)
Loader/maybe_pair (Maybe/some x) dflt pass = do Loader/ {
  ask Data.Pair.new (fst=x) (snd=res) = (pass x)
  return Data.Pair.new (Maybe/some x)
}
Loader/maybe_pair (Maybe/none) dflt pass = Loader/pure (Data.Pair.new Maybe/none dflt)
