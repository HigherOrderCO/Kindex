use Apps.Kind.Loader as Loader
use Data.List as List

//! Applies List.map through the Loader, but also returning the original
Loader/list_map <t> <r> (xs: List/ t) (pass: t -> (Loader/ (Data.Pair t r))) : Loader/ (Data.Pair (List/ t) (List/ r))
Loader/list_map (List/cons x xs) pass = do Loader/ {
  ask Data.Pair.new (fst=x) (snd=head) = pass x
  ask Data.Pair.new (fst=xs) (snd=tail) = Loader/list_map xs pass
  return Data.Pair.new (List/cons x xs) (List/cons head tail)
}
Loader/list_map (List/nil) pass = Loader/pure (Data.Pair.new [] [])