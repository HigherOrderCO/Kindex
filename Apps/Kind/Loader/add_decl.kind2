use Apps.Kind.Loader as Loader
use Apps.Kind.SyntaxTree.Sugared.Declaration as Declaration
use Apps.Kind.SyntaxTree.Sugared.Declaration.Entry as Entry
use Data.Maybe as Maybe

Loader/add_decl (decl: Declaration/) : Loader/ (Maybe/ Data.U60)
Loader/add_decl (Declaration/entry (Entry/new range name args type rules)) = do Loader/ {
  ask decl = Loader/take_decl_by_name name
  match Maybe/ decl {
    some (value=decl) =>
    do Loader/ {
      let Data.Pair.new (fst=decl) (snd=prev_id) = decl
      let Data.Pair.new (fst=decl) (snd=prev_name) = Declaration/get_name decl
      let CtrName/new (range=prev_range) .. = prev_name
      Loader/set_decl decl prev_id
      Loader/add_err (Loader/Error.repeated_decl name prev_range)
      return Maybe/none
    }
    none => do Loader/ {
      Loader/add_entry (Entry/new range name args type rules)
    }
  }

}
// Loader/add_decl (Declaration/record record) =
// Loader/add_decl (Declaration/sum sum) =