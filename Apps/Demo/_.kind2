// Kind2 Demo App
// ==============
// This is a simple app that just displays a string showing the last event.

// The Demo app's state is a pair with:
// - A frame count (U60)
// - A text to display (String)
Apps.Demo.State : Type {
  Pair U60 String
}

// The 'init' constant defines the initial state.
Apps.Demo.init : Apps.Demo.State {
  Pair.new 0 "Loading." 
}

// The 'draw' function converts the state into an HTML element.
Apps.Demo.draw (state: Apps.Demo.State) : App.DOM
Apps.Demo.draw (Pair.new u v count text) =
  let props = []
  let style = [
    (Pair.new "background" "#F0F0F0")
    (Pair.new "height" "100%")
    (Pair.new "display" "flex")
    (Pair.new "fontSize" "32px")
    (Pair.new "fontFamily" "monaco")
    (Pair.new "justifyContent" "center")
    (Pair.new "alignItems" "center")
  ]
  (App.DOM.node "div" props style [
    (App.DOM.text (Show.to_string (Show.many [
      (String.show "[#")
      (U60.show count)
      (String.show "] ")
      (String.show text)
    ])))
  ])

// The 'when' function reacts to events. Can perform effects via IO, and may return a new state.
Apps.Demo.when (event: App.Event) (state: Apps.Demo.State) : IO Apps.Demo.State
Apps.Demo.when App.Event.init (Pair.new u v count text) = do IO {
  return Pair.new count "init"
}
Apps.Demo.when App.Event.frame (Pair.new u v count text) = do IO {
  return Pair.new (+ count 1) text
}
Apps.Demo.when (App.Event.key_down key_code) (Pair.new u v count text) = do IO {
  return Pair.new count (Show.render [
    (String.show "key_down: ") (U60.show key_code)
  ])
}
Apps.Demo.when (App.Event.mouse_down button (Pair.new s t x y)) (Pair.new u v count text) = do IO {
  return (Pair.new count (Show.render [
    (String.show "mouse_down: ") (U60.show x) (String.show " ") (U60.show y)
  ]))
}
Apps.Demo.when (App.Event.input element input) (Pair.new u v count text) = do IO {
  return Pair.new count "input"
}
Apps.Demo.when event state = do IO {
  return state
}

// An App just combines the 'init', 'draw' and 'when' functions.
Apps.Demo : App Apps.Demo.State {
  (App.new
    Apps.Demo.init
    (state => Apps.Demo.draw state)
    (event => state => Apps.Demo.when event state))
}
