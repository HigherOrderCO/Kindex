// Bool.false_neq_true: false != true
// (absurd => Equal.rewrite (x => if x {Empty} else {Unit}) absurd)
 #kdl_name = Bool_f_n_t
Bool.false_not_true (e: (Equal Bool Bool.false Bool.true)) : Empty
Bool.false_not_true e =
  // How this works: Equal.rewrite takes a predicate that changes a value into a
  // type. It returns the result of applying the predicate on the RHS but takes
  // in a value of the type of applying the predicate on the LHS This works on
  // the type-level because both types are meant to be equal, but when the
  // values are different (such as Bool.false and Bool.true) Equal.rewrite
  // returns inconstructible types at the type level, which we chose to be Empty
  // in this case.
  Equal.rewrite e (x => Bool.if Type x Empty Unit) Unit.new
