// 1.0.1. Exercise: 2 stars, recommended (basic_induction). Prove the following
// using induction. You might need previously proven results.

Mult_0_r (n: Nat) : (Equal Nat (Nat.mul n Nat.zero) Nat.zero)
Mult_0_r Nat.zero = ?

// Plus_n_Sm (n: Nat) (m: Nat) : (Equal Nat (Nat.succ (Nat.add n m)) (Nat.add n (Nat.succ m)))
// Plus_n_Sm n m = ?
//
// Plus_comm (n: Nat) (m: Nat) : (Equal Nat (Nat.add n m) (Nat.add m n))
// Plus_comm n m = ?
//
// Plus_n_Z (n: Nat) : (Equal Nat n (Nat.add n Nat.zero))
// Plus_n_Z Nat.zero = Equal.refl
// Plus_n_Z (Nat.succ n.pred) =
//                         let ind = Plus_n_Z n.pred
//                         let app = Equal.apply (x => Nat.succ x) ind
//                         app
//                         // let inductiveHypothesis = plus_n_Z k in
//                         // rewrite inductiveHypothesis in Refl
// // - ind : (Equal Nat n.pred (Nat.add n.pred Nat.zero))
// // - app : (Equal Nat (Nat.succ n.pred) (Nat.succ (Nat.add n.pred Nat.zero)))
// // - Goal: (Equal Nat (Nat.succ n.pred) (Nat.succ (Nat.add n.pred Nat.zero)))
//
//
// Plus_assoc (n: Nat) (m: Nat) (p: Nat) : (Equal Nat (Nat.add n (Nat.add m p)) (Nat.add (Nat.add n m) p))
// Plus_assoc n m p = ?
//
//
// // 1.0.2. Exercise: 2 stars (double_plus). Consider the following function, which
// // doubles its argument:
//
// Double (n: Nat) : Nat
// Double Nat.zero = Nat.zero
// Double (Nat.succ n) = Nat.succ (Nat.succ (Double n))
//
// // 2. PROOFS WITHIN PROOFS 29
//
// Double_plus (n: Nat) : (Equal Nat (Double n) (Nat.add n n))
// Double_plus n = ?
//
// // 1.0.3. Exercise: 2 stars, optional (evenb_S). One inconvenient aspect of our
// // definition of evenb n is that it may need to perform a recursive call on n - 2. This
// // makes proofs about evenb n harder when done by induction on n, since we may
// // need an induction hypothesis about n - 2. The following lemma gives a better
// // characterization of evenb (S n):
// Evenb (n: Nat) : Bool
// Evenb Nat.zero = Bool.true
// Evenb (Nat.succ k) = Bool.false
// Evenb (Nat.succ (Nat.succ k))  = Evenb k
//
// Evenb_S (n: Nat) : (Equal Bool (Evenb (Nat.succ n)) (Bool.not (Evenb n)))
// // Evenb_S n = ?
//
//
// // 3.0.1. Exercise: 3 stars, recommended (mult_comm). Use rewrite to help
// // prove this theorem. You shouldn’t need to use induction on plus_swap.
// Plus_swap (n: Nat) (m: Nat) (p: Nat) : (Equal Nat (Nat.add n (Nat.add m p)) (Nat.add m (Nat.add n p)))
// // Plus_swap n m p = ?
//
// // Now prove commutativity of multiplication. (You will probably need to define and
// // prove a separate subsidiary theorem to be used in the proof of this one. You may
// // find that plus_swap comes in handy.)
//
// Mult_comm (n: Nat) (m: Nat) : (Equal Nat (Nat.mul m n) (Nat.mul n m))
// // Mult_comm m n = ?
//
//
// // 3.0.2. Exercise: 3 stars, optional (more_exercises).
// // Edit
// // Take a piece of paper. For each of the following theorems, first think about whether
// // (a) it can be proved using only simplification and rewriting, (b) it also requires case
// // analysis (destruct), or (c) it also requires induction. Write down your prediction.
// // Then fill in the proof. (There is no need to turn in your piece of paper; this is just
// // to encourage you to reflect before you hack!)
// // 3. MORE EXERCISES 31
// Lte (n: Nat) (m: Nat) : Bool
// Lte Nat.zero m = Bool.true
// Lte n Nat.zero = Bool.false
// Lte (Nat.succ k) (Nat.succ j) = Lte k j
//
// Lte_refl (n: Nat) : (Equal Bool Bool.true (Lte n n))
// Lte_refl n = ?
//
// Zero_nbeq_S (n: Nat) : (Equal Bool (Nat.equal Nat.zero (Nat.succ n)) Bool.false)
// Zero_nbeq_S n = Equal.refl
//
// Andb_false_r (b: Bool) : (Equal Bool (Bool.and b Bool.false) Bool.false)
// Andb_false_r b = ?
//
// Plus_ble_compat_l (n: Nat) (m: Nat) (p: Nat) (e: Equal Bool (Lte n m) Bool.true) : (Equal Bool (Lte (Nat.add p n) (Nat.add p m)) Bool.true)
// Plus_ble_compat_l n m p prf = ?
//
// S_nbeq_0 (n: Nat) : (Equal Bool (Nat.equal (Nat.succ n) Nat.zero) Bool.false )
// S_nbeq_0 n = Equal.refl
//
// Mult_1_l (n: Nat) : (Equal Nat (Nat.mul (Nat.succ(Nat.zero)) n) n)
// Mult_1_l n = Equal.refl
//
// All3_spec (b: Bool) (c: Bool) : (Equal Bool (Bool.or (Bool.and b c) (Bool.or (Bool.not b) (Bool.not c))) Bool.true)
// All3_spec b c = ?
//                                                         // (n + m) * p = (n * p) + (m * p)
// Mult_plus_distr_r (n: Nat) (m: Nat) (p: Nat) : (Equal Nat (Nat.mul (Nat.add n m) p) (Nat.add (Nat.mul n p) (Nat.mul n p)))
// Mult_plus_distr_r n m p = ?
//
// Mult_assoc (n: Nat) (m: Nat) (p: Nat) : (Equal Nat (Nat.mul n (Nat.mul m p)) (Nat.mul (Nat.mul n p) p))
// Mult_assoc n m p = ?
//
// // 3.0.3. Exercise: 2 stars, optional (beq_nat_refl).
// // Edit
// // Prove the following theorem. (Putting the True on the left-hand side of the equality
// // may look odd, but this is how the theorem is stated in the Coq standard library,
// // so we follow suit. Rewriting works equally well in either direction, so we will have
// // no problem using the theorem no matter which way we state it.)
//
// Beq_nat_refl (n : Nat) : (Equal Bool Bool.true (Nat.equal n n))
// Beq_nat_refl n = ?
//
// // 3.0.4. Exercise: 2 stars, optional (plus_swap’).
// // Edit
// // The replace tactic allows you to specify a particular subterm to rewrite and what
// // you want it rewritten to: replace (t) with (u) replaces (all copies of) expression t
// // in the goal by expression u, and generates t = u as an additional subgoal. This is
// // often useful when a plain rewrite acts on the wrong part of the goal.
// // 32 3. INDUCTION : PROOF BY INDUCTION
// // Use the replace tactic to do a proof of plus_swap', just like plus_swap but without
// // needing assert (n + m = m + n).
//
// // !!!!!!!!!!!!!!!!!!!!!!!!!!!ultilizar Plus_comm!!!!!!!!!!!!!!!!!!!!
// Plus_swap_plus_comm (n: Nat) (m: Nat) (p: Nat) : (Equal Nat (Nat.add n (Nat.add m p)) (Nat.add m (Nat.add n p)))
// Plus_swap_plus_comm n m p = ?
//
// // 3.0.5. Exercise: 3 stars, recommended (binary_commute). Recall the incr and
// bin_to_nat functions that you wrote for the binary exercise in the Basics chapter.
// Prove that the following diagram commutes:
// bin --------- incr ౪౪౪౪ౝ౧౑> bin
// | |
// bin_to_nat bin_to_nat
// | |
// v v
// nat ---------- S ౪౪౪౪౪౪ౝ౧౑> nat
// That is, incrementing a binary number and then converting it to a (unary) natural
// number yields the same result as first converting it to a natural number and then
// incrementing. Name your theorem bin_to_nat_pres_incr (“pres” for “preserves”).
// Before you start working on this exercise, please copy the definitions from your
// solution to the binary exercise here so that this file can be graded on its own. If
// you find yourself wanting to change your original definitions to make the property
// easier to prove, feel free to do so!

// 3.0.6. Exercise: 5 stars, advanced (binary_inverse). This exercise is a continuation of the previous exercise about binary numbers. You will need your definitions
// and theorems from there to complete this one.
// (a) First, write a function to convert natural numbers to binary numbers.
// Then prove that starting with any natural number, converting to binary,
// then converting back yields the same natural number you started with.
// (b) You might naturally think that we should also prove the opposite direction: that starting with a binary number, converting to a natural, and
// then back to binary yields the same number we started with. However,
// this is not true! Explain what the problem is.
// (c) Define a “direct” normalization function – i.e., a function normalize from
// binary numbers to binary numbers such that, for any binary number
// b, converting to a natural and then back to binary yields (normalize b).
// Prove it. (Warning: This part is tricky!)
