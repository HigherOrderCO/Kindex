Bool        : Type
Bool.true   : Bool
Bool.false  : Bool

Nat                 : Type
Nat.zero            : Nat
Nat.succ(pred: Nat) : Nat

Bool.if <r: Type> (b: Bool) (if_t: r) (if_f: r) : r
Bool.if  r       Bool.true   if_t      if_f     = if_t
Bool.if  r       Bool.false  if_t      if_f     = if_f

//Bits
//File for exercises in Bits
//e = empty
//o = 0
//i = 1
Bits                  : Type
Bits.e                : Bits
Bits.o  (pred: Bits)  : Bits
Bits.i  (pred: Bits)  : Bits

// +==============================================+
// |================= EXERCISES ==================|
// +==============================================+

//Verifies if it is an Empty Bit
//is_empty(a)      -> Bool.false
//is_empty(b)      -> Bool.false
//is_empty(c)      -> Bool.false
//is_empty(d)      -> Bool.false
//is_empty(Bits.e) -> Bool.true
Bits.is_empty  (b: Bits) : Bool
Bits.is_empty Bits.e     = Bool.true
Bits.is_empty b          = Bool.false

//Gets the Tail of a Bits structure
//tail(a) -> Bits.i(Bits.e)
//tail(b) -> Bits.i(Bits.i(Bits.e))
//tail(c) -> Bits.o(Bits.i(Bits.i(Bits.e)))
//tail(d) -> Bits.i(Bits.i(Bits.i(Bits.e)))
Bits.tail (b: Bits)   : Bits
Bits.tail Bits.e      = Bits.e
Bits.tail (Bits.o b)  = b
Bits.tail (Bits.i b)  = b

//Negates all Bits
//notb(a) -> Bits.o(Bits.o(Bits.e))
//notb(b) -> Bits.i(Bits.o(Bits.o(Bits.e)))
//notb(c) -> Bits.i(Bits.i(Bits.o(Bits.o(Bits.e))))
//notb(d) -> Bits.o(Bits.o(Bits.o(Bits.o(Bits.e))))
Bits.notb (b: Bits)   : Bits
Bits.notb Bits.e      = Bits.e
Bits.notb (Bits.o b)  = (Bits.i (Bits.notb (b)))
Bits.notb (Bits.i b)  = (Bits.o (Bits.notb (b)))

// 2º 2¹ 2² 2³
// i  i  e    -> 3
// o  o  i  e -> 4
// o  i  e    -> 2

//Increments a Bit
//inc(a) ->(Bits.i(Bits.e))
//inc(b) -> Bits.i(Bits.o(Bits.i(Bits.e)))
//inc(c) -> Bits.i(Bits.i(Bits.i(Bits.e)))
//inc(d) -> Bits.o(Bits.o(Bits.o(Bits.o(Bits.i(Bits.e)))))
Bits.inc (b: Bits)  : Bits
Bits.inc Bits.e     = Bits.i (Bits.e)
Bits.inc (Bits.o b) = Bits.i b
Bits.inc (Bits.i b) = Bits.o (Bits.inc b)
// Bits.inc b = Bits.i b

//Decrements a Bit
//dec(a) -> (Bits.e)
//dec(b) -> Bits.o( Bits.i (Bits.e))
//dec(c) -> Bits.i( Bits.o (Bits.i (Bits.e)))
//dec(d) -> Bits.i( Bits.i (Bits.o (Bits.i (Bits.e))))
Bits.dec (b: Bits)        : Bits
Bits.dec Bits.e           = Bits.e
Bits.dec (Bits.o Bits.e)  = Bits.e
Bits.dec (Bits.o b)       = Bits.i (Bits.dec b)
Bits.dec (Bits.i b)       = Bits.o b

//Concatenate two Bits structures
//concat(b,c) -> Bits.o (Bits.i (Bits.i (Bits.i (Bits.i (Bits.e)))))
//concat(c,d) -> Bits.o (Bits.o (Bits.i (Bits.i (Bits.o (Bits.i (Bits.i (Bits.e)))))))
//concat(b (notb d)) -> Bits. i (Bits.i (Bits.o (Bits.o (Bits.i (Bits.i (Bits.e)))))) 
Bits.concat (a: Bits) (b: Bits) : Bits
Bits.concat Bits.e a            = a
Bits.concat (Bits.o a) b        = Bits.o (Bits.concat a b)
Bits.concat (Bits.i a) b        = Bits.i (Bits.concat a b)

//Adds two Bits structures
//add(a,b) -> Bits.i(Bits.o(Bits.o(Bits.i(Bits.e))))
//add(b,c) -> Bits.o(Bits.i(Bits.o(Bits.o(Bits.i(Bits.e)))))
//add(c,d) -> Bits.i(Bits.i(Bits.o(Bits.i(Bits.i(Bits.e)))))
Bits.add  (a: Bits) (b: Bits)   : Bits
Bits.add Bits.e b               = b
Bits.add a Bits.e               = a
Bits.add (Bits.o a) (Bits.o b)  = Bits.o (Bits.add a b)
Bits.add (Bits.o a) (Bits.i b)  = Bits.i (Bits.add a b)
Bits.add (Bits.i a) (Bits.o b)  = Bits.i (Bits.add a b)
Bits.add (Bits.i a) (Bits.i b)  = Bits.o (Bits.inc (Bits.add a b))

// 1 1
//   1 1 0  ->  b
//   + 1 1  ->  a
// 1 0 0 1  -> objetivo
// 1 0 1 1  -> retornou
// (Bits.i (Bits.i (Bits.o (Bits.i Bits.e))))

Bits.sub (a: Bits) (b: Bits)    : Bits
Bits.sub a Bits.e               = a
Bits.sub Bits.e b               = Bits.e
Bits.sub (Bits.o a) (Bits.o b)  = (Bits.sub a b)
Bits.sub (Bits.i a) (Bits.i b)  = Bits.i (Bits.sub a b)
Bits.sub (Bits.i a) (Bits.o b)  = Bits.o (Bits.sub a b)
Bits.sub (Bits.o a) (Bits.i b)  = (Bits.sub a (Bits.i b))

// 1 1 0 0                1 1 0
//   - 1 1                - 1 1
// -------                -----
// 1 0 0 1                i  1 1


//Returns Bits.i if only both bits are Bits.i
//and(a,b) -> Bits.o(Bits.i(Bits.e))
//and(b,c) -> Bits.o(Bits.o(Bits.i(Bits.e)))
//and(c,d) -> Bits.o(Bits.o(Bits.i(Bits.i(Bits.e))))
Bits.and (a: Bits) (b: Bits)    : Bits
Bits.and  a Bits.e              = a
Bits.and (Bits.e)   b           = b
Bits.and (Bits.i a) (Bits.o b)  = Bits.o (Bits.and a b)
Bits.and (Bits.o a) (Bits.i b)  = Bits.o (Bits.and a b)
Bits.and (Bits.o a) (Bits.o b)  = Bits.o (Bits.and a b)
Bits.and (Bits.i a) (Bits.i b)  = Bits.i (Bits.and a b)

//  1 1 0 0     -> c
//  1 1 1 1     -> d
//  1 1 0 0     -> o que deveria vir
//  1 1 1 1 0 0 -> o que tá vindo

//Returns Bits.i if any of bits are Bits.i
//or(a,b) -> Bits.i(Bits.i(Bits.i(Bits.e)))
//or(b,c) -> Bits.o(Bits.i(Bits.i(Bits.i(Bits.e))))
//or(c,d) -> Bits.i(Bits.i(Bits.i(Bits.i(Bits.e))))
Bits.or (a: Bits) (b:Bits)    : Bits
Bits.or a Bits.e              = a
Bits.or Bits.e b              = b
Bits.or (Bits.i a) (Bits.i b) = Bits.i (Bits.or a b)
Bits.or (Bits.o a) (Bits.o b) = Bits.o (Bits.or a b)
Bits.or (Bits.i a) (Bits.o b) = Bits.i (Bits.or a b)
Bits.or (Bits.o a) (Bits.i b) = Bits.i (Bits.or a b)

// 1 1 0 0 -> c
//   1 1 0 -> b
// 1 1 1 0 -> objetivo
// 1 1 1 0 -> retornou
// (Bits.o (Bits.i (Bits.i (Bits.i Bits.e))))

//Verifies if both Bit structures are equal
//eql(a,b) -> Bool.false
//eql(b,c) -> Bool.false
//eql(d,d) -> Bool.true
Bits.eql (a: Bits) (b: Bits)   : Bool
Bits.eql Bits.e Bits.e         = Bool.true
Bits.eql (Bits.o a) (Bits.o b) = Bits.eql a b
Bits.eql (Bits.i a) (Bits.i b) = Bits.eql a b
Bits.eql a b                   = Bool.false


//Reverse a bit structures
//reverse(a) -> Bits.i(Bits.i(Bits.e))
//reverse(b) -> Bits.i(Bits.i(Bits.o(Bits.e)))
//reverse(c) -> Bits.i(Bits.i(Bits.o(Bits.o(Bits.e))))
//reverse(d) -> Bits.i(Bits.i(Bits.i(Bits.i(Bits.e))))
Bits.reverse (a: Bits)  : Bits
Bits.reverse Bits.e     = Bits.e
Bits.reverse (Bits.o a) = (Bits.concat (Bits.reverse a) (Bits.o Bits.e))
Bits.reverse (Bits.i a) = (Bits.concat (Bits.reverse a) (Bits.i Bits.e))

// 1 1 0 0 -> c
// 0 0 1 1

// Return de length of a bit structure
//length(a) -> Nat.succ(Nat.succ(Nat.zero))
//length(b) -> Nat.succ(Nat.succ(Nat.succ(Nat.zero)))
//length(c) -> Nat.succ(Nat.succ(Nat.succ(Nat.succ(Nat.zero))))
//length(d) -> Nat.succ(Nat.succ(Nat.succ(Nat.succ(Nat.zero))))
Bits.length (a: Bits)   : Nat
Bits.length Bits.e      = Nat.zero
Bits.length (Bits.o a)  = Nat.succ (Bits.length a)
Bits.length (Bits.i a)  = Nat.succ (Bits.length a)

//Multiplies two Bits structures
//mul(a,b) -> Bits.o(Bits.i(Bits.o(Bits.o(Bits.i(Bits.e)))))
//mul(b,c) -> Bits.o(Bits.o(Bits.o(Bits.i(Bits.o(Bits.o(Bits.i(Bits.e)))))))
Bits.mul (a: Bits) (b: Bits)  : Bits
Bits.mul a Bits.e             = Bits.e
Bits.mul a (Bits.o b)         = (Bits.mul (Bits.o a) b)
Bits.mul a (Bits.i b)         = Bits.add a (Bits.mul (Bits.o a) b)

// 1 x 1 = 1
// 1 x 0 = 0
// 0 x 0 = 0
// 0 x 1 = 0

//     1 1 0  -> b  \/ -> a ->   x 1 1
//    x  1 1  -> a  /\ -> b ->   1 1 0
// ---------                   -------
//     1 1 0                       0 
// + 1 1 0                       1 1  
// ---------                   1 1
// 1 0 0 1 0                -----------
//                           1 0 0 1 0 

// 1 0 0 1 0
// (Bits.o (Bits.i (Bits.o (Bits.o (Bits.i Bits.e)))))

//Drops a n Number of Bits starting from from the least significative bit
//drop(1, a) -> Bits.i(Bits.e)
//drop(1, b) -> Bits.i(Bits.i(Bits.e))
//drop(1, c) -> Bits.o(Bits.i(Bits.i(Bits.e)))
//drop(1, d) -> Bits.i(Bits.i(Bits.i(Bits.e)))
Bits.drop (n: Nat) (b: Bits)  : Bits
Bits.drop Nat.zero b          = b
Bits.drop n Bits.e            = Bits.e
Bits.drop (Nat.succ n) b      = Bits.drop n (Bits.tail b)
// Bits.drop (Nat.succ n) (Bits.i b) = Bits.drop n b



//Takes n Bits from the structure, starting from the least significative bit
//take(1, a) -> Bits.i(Bits.e)
//take(2, b) -> Bits.o(Bits.i(Bits.e))
//take(3, c) -> Bits.o(Bits.o(Bits.i(Bits.e)))
//take(4, d) -> Bits.i(Bits.i(Bits.i(Bits.i(Bits.e))))
Bits.take (n: Nat) (b: Bits)      : Bits
Bits.take Nat.zero b              = Bits.e
Bits.take n Bits.e                = Bits.e
Bits.take (Nat.succ n) (Bits.o b) = Bits.o (Bits.take n b)
Bits.take (Nat.succ n) (Bits.i b) = Bits.i (Bits.take n b)


// Bits.div (a: Bits) (b: Bits)  : Bits
// Bits.div  a Bits.e            = Bits.e
// Bits.div Bits.e b             = Bits.e
// Bits.div a b                  = Bits.inc (Bits.div (Bits.sub a b) b)



// +========================================================+
// |====================== Main ============================|
// +========================================================+

Main {
  // let a = Bits.e
  let a = Bits.i (Bits.i (Bits.e))
  let b = Bits.o (Bits.i (Bits.i (Bits.e)))
  let c = Bits.o (Bits.o (Bits.i (Bits.i (Bits.e))))
  let d = Bits.i (Bits.i (Bits.o (Bits.i (Bits.e))))
  let e = Bits.i (Bits.i (Bits.i (Bits.i (Bits.e))))
  let f = Bits.o Bits.e
  // (Bits.is_empty e)
  // (Bits.tail d)
  // (Bits.notb b)
  // (Bits.inc f)
  // (Bits.dec f)
  // (Bits.concat b c)
  // (Bits.add b c)
  // (Bits.and c d)
  // (Bits.or b c)
  // (Bits.eql d c)
  // (Bits.reverse c)
  // (Bits.length b)
  // (Bits.mul b a)
  // (Bits.drop (U60.to_nat 2) (b))
  // (Bits.take (U60.to_nat 3) (c))
  (Bits.sub e d)
}
