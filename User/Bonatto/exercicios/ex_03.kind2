Bool : Type
Bool.true : Bool
Bool.false : Bool

Bool.eql (a: Bool) (b: Bool) : Bool
Bool.eql Bool.true Bool.true = Bool.true
Bool.eql Bool.true Bool.false = Bool.false
Bool.eql Bool.false Bool.true = Bool.false
Bool.eql Bool.false Bool.false = Bool.true

Bool.not (a: Bool) : Bool
Bool.not Bool.true  = Bool.false
Bool.not Bool.false = Bool.true

Bool.if <r: Type> (b: Bool) (if_t: r) (if_f: r) : r
Bool.if r Bool.true  if_t if_f = if_t
Bool.if r Bool.false if_t if_f = if_f

// Basic Exercises involving Nats
Nat : Type
Nat.zero : Nat
Nat.succ(pred: Nat) : Nat

// Increment
// 2 + 1 = 3
// 0 + 1 = 1
Nat.inc(a: Nat): Nat
Nat.inc a      = Nat.succ(a)

// Decrement
// 2 - 1 = 1
// 0 - 1 = 0
Nat.dec(a: Nat)         : Nat 
Nat.dec Nat.zero        = Nat.zero
Nat.dec (Nat.succ a)    = a

// Return True if nat is Zero else false
// a = 0 -> Bool.true
// a = 1 -> Bool.False
// a = 2 -> Bool.false
Nat.is_zero (a: Nat)    : Bool
Nat.is_zero Nat.zero    = Bool.true
Nat.is_zero a           = Bool.false

Main {
    let a = (Nat.zero)
    let b = (Nat.succ (Nat.zero))
    let c = (Nat.succ(Nat.succ (Nat.zero)))
    // (Nat.inc(c))
    // (Nat.dec(a))
    (Nat.is_zero(Nat.dec(a)))
}

