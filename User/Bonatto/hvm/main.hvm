// // Creates a tree with `2^n` elements
// (Gen 0) = (Leaf 1)
// (Gen n) = (Node (Gen(- n 1)) (Gen(- n 1)))
//
// // Adds all elements of a tree
// (Sum (Leaf x))   = x
// (Sum (Node a b)) = (+ (Sum a) (Sum b))
//

// (Main n) = (Sum (Gen n))

// // Folds over a list
// (Fold Nil         c n) = n
// (Fold (Cons x xs) c n) = (c x (Fold xs c n))
//
// // A list from 0 to n
// (Range 0 xs) = xs
// (Range n xs) =
//   let m = (- n 1)
//   (Range m (Cons m xs))
//
// // Sums a big list with fold
// (Main n) =
//   let size = (* n 1000000)
//   let list = (Range size Nil)
//   (Fold list λaλb(+ a b) 0)

// // QuickSort
// (QSort p s Nil)          = Empty
// (QSort p s (Cons x Nil)) = (Single x)
// (QSort p s (Cons x xs))  =
//   (Split p s (Cons x xs) Nil Nil)
//
// // Splits list in two partitions
// (Split p s Nil min max) =
//   let s   = (>> s 1)
//   let min = (QSort (- p s) s min)
//   let max = (QSort (+ p s) s max)
//   (Concat min max)
// (Split p s (Cons x xs) min max) =
//   (Place p s (< p x) x xs min max)
//
// // Sorts and sums n random numbers
// (Main n) =
//   let list = (Randoms 1 (* 100000 n))
//   (Sum (QSort Pivot Pivot list))
//
// // Computes f^(2^n)
// (Comp 0 f x) = (f x)
// (Comp n f x) = (Comp (- n 1) λk(f (f k)) x)
//
// // Performs 2^n compositions
// (Main n) = (Comp n λx(x) 0)
//
// // Increments a Bits by 1
// (Inc xs) = λex λox λix
//   let e = ex
//   let o = ix
//   let i = λp (ox (Inc p))
//   (xs e o i)
//
// // Adds two Bits
// (Add xs ys) = (App xs λx(Inc x) ys)
//
// // Multiplies two Bits
// (Mul xs ys) =
//   let e = End
//   let o = λp (B0 (Mul p ys))
//   let i = λp (Add ys (B0 (Mul p ys)))
//   (xs e o i)
//
// // Squares (n * 100k)
// (Main n) =
//   let a = (FromU32 32 (* 100000 n))
//   let b = (FromU32 32 (* 100000 n))
//   (ToU32 (Mul a b))
//
// (If 0 t f) = f
// (If 1 t f) = t
//
// (Swap 0 a b) = (N a b)
// (Swap 1 a b) = (N b a)
//
// (Merge 0 a b)                 = (Swap (> a b) a b)
// (Merge n (N i0 i1) (N i2 i3)) = (Mix (- n 1) (Merge (- n 1) i0 i2) (Merge (- n 1) i1 i3))
//
// (Mix n (N o0 x0) (N x1 o3)) = (End o0 (Merge n x0 x1) o3)
// (End o0 (N o1 o2) o3)       = (N (N o0 o1) (N o2 o3))
//
// (Sort 0 a)       = a
// (Sort n (N a b)) = (Merge (- n 1) (Sort (- n 1) a) (Sort (- n 1) b))
//
// (Gen 0 x) = (- 4294967296 x)
// (Gen n x) = (N (Gen (- n 1) (* x 2)) (Gen (- n 1) (+ (* x 2) 1)))
//
// (Sum 0 x)       = x
// (Sum n (N a b)) = (+ (Sum (- n 1) a) (Sum (- n 1) b))
//
// Increments a Bits by 1
(Inc xs) = λex λox λix
  let e = ex
  let o = ix
  let i = λp (ox (Inc p))
  (xs e o i)

// Adds two Bits
(Add xs ys) = (App xs λx(Inc x) ys)

// Multiplies two Bits
(Mul xs ys) =
  let e = End
  let o = λp (B0 (Mul p ys))
  let i = λp (Add ys (B0 (Mul p ys)))
  (xs e o i)

// Squares (n * 100k)
(Main n) =
  let a = (FromU32 32 (* 100000 n))
  let b = (FromU32 32 (* 100000 n))
  (ToU32 (Mul a b))
