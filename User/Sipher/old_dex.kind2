User.Sipher.Wallet : Type
User.Sipher.Wallet = Pair String Nat

User.Sipher.Zero_address : String
User.Sipher.Zero_address = "0x0000"

User.Sipher.Trash_wallet : User.Sipher.Wallet
User.Sipher.Trash_wallet = Pair.new String Nat "0x9999" Nat.zero

User.Sipher.Zero_wallet : User.Sipher.Wallet
User.Sipher.Zero_wallet = Pair.new String Nat (User.Sipher.Zero_address) Nat.zero


//Pair.map_fst <a> <b> <c> (pair: Pair a b) (func: a -> c) : Pair c b
//Pair.map_fst a b c (Pair.new t.a t.b p.fst p.snd) func =
  //Pair.new c t.b (func p.fst) p.snd

//Pair.map_snd <a> <b> <c> (pair: Pair a b) (func: b -> c) : Pair a c
//Pair.map_snd a b c (Pair.new t.a t.b p.fst p.snd) func =
  //Pair.new t.a c p.fst (func p.snd)

User.Sipher.Transaction : Type
User.Sipher.Transaction.recipt 
  (mana_price : String)
  (to         : String)
  (value      : String)
  (data       : String)
: User.Sipher.Transaction

//User.Sipher.Transaction_to_text (transaction: User.Sipher.Transaction) : String
//User.Sipher.Transaction_to_text (User.Sipher.Transaction.recipt mana_price to value data)  = 
  //let pre_mana_price = "Mana price: "
  //let pre_to         = "Receiver: "
  //let pre_value      = "Value: "
  //let pre_data       = "Data: "
  //let concat         = (x => y => (String.concat x y)) :: String -> String -> String

  //let mana_price  = concat (concat pre_mana_price mana_price) ", "
  //let to          = concat (concat pre_to to) ", "
  //let value       = concat (concat pre_value value) ", "
  //let data        = concat (concat pre_data data) ", "
  //concat (concat value (concat to mana_price )) data





User.Sipher.List_to_BitsMap
  (list: List (Pair String (Pair String Nat)))
: Bits.Map (Pair String Nat)
User.Sipher.List_to_BitsMap (List.nil t) = Bits.Map.new
User.Sipher.List_to_BitsMap (List.cons t head tail)  =
  let fst = Pair.fst head
  let equal = List.any tail (x => (String.equal (Pair.fst x) fst)) ::  (Pair String (Pair String Nat)) -> Bool
  if equal { 
    User.Sipher.List_to_BitsMap tail
  } else {
    let converted_list = (pair => (Pair.map_fst String (Pair String Nat) Bits pair (x => (Bits.read x )))) :: (Pair String (Pair String Nat)) -> (Pair Bits (Pair String Nat))
    let convert = List.map (List.cons head tail) converted_list
    User.Sipher.List_to_BitsMap_aux convert Bits.Map.new
  }

User.Sipher.List_to_BitsMap_aux (xs: List (Pair Bits (Pair String Nat))) (map: Bits.Map (Pair String Nat)) : Bits.Map (Pair String Nat)
User.Sipher.List_to_BitsMap_aux (List.nil t) map = map
User.Sipher.List_to_BitsMap_aux (List.cons t head tail ) map =
    let key = Pair.fst head
    let value = Pair.snd head
    let map = Bits.Map.set map key value
    User.Sipher.List_to_BitsMap_aux tail map



User.Sipher.get_all_keys.go <a: Type>
  (map : Bits.Map a)
  (key_val: List (Pair Bits a))
  (acum: Bits)
: List (Pair Bits a)
User.Sipher.get_all_keys.go a (Bits.Map.new t) key_val acum = key_val
User.Sipher.get_all_keys.go a (Bits.Map.tie t val left right) key_val acum =
  let list0 = match Maybe val {
    none => key_val
    some => (List.cons (Pair.new (Bits.reverse acum) val.value) key_val)
  }
  let list1 = User.Sipher.get_all_keys.go left list0 (Bits.o acum)
  User.Sipher.get_all_keys.go right list1 (Bits.i acum)
  
  
  
User.Sipher.get_all_keys <a: Type>
  (map : Bits.Map a)
: List (Pair Bits a)
User.Sipher.get_all_keys a map = User.Sipher.get_all_keys.go map List.nil Bits.e

User.Sipher.get_total_wallet_value
  (list : List (Pair Bits (Pair String Nat)))
: Nat
User.Sipher.get_total_wallet_value list = 
  let result = Nat.zero
  let snd = (x =>  Pair.snd String Nat x) :: (Pair String Nat) -> Nat
  let add = (x => y => (Nat.add x y)) :: Nat -> Nat -> Nat
  List.for (User.Sipher.snd list) result (x => add (snd x)) 

User.Sipher.snd 
 (list: (List (Pair Bits (Pair String Nat))))
: List (Pair String Nat)
  User.Sipher.snd (List.nil t) = List.nil
  User.Sipher.snd (List.cons t head tail) = List.cons (Pair.snd head) (User.Sipher.snd tail)


User.Sipher.Proof_wallet : Bits.Map User.Sipher.Wallet
User.Sipher.Proof_wallet = 
    let left  = (Bits.Map.tie (Maybe.some (Pair.new "1" (Nat.succ Nat.zero))) Bits.Map.new Bits.Map.new)
    let right = (Bits.Map.tie (Maybe.some (Pair.new "2" (Nat.succ Nat.zero))) Bits.Map.new Bits.Map.new)
    Bits.Map.tie Maybe.none left right

User.Sipher.doesnt_change_value
  (from: Bits)
  (to  : Bits)
  (wallet: Bits.Map User.Sipher.Wallet)
  (value: Nat)
  (transaction: User.Sipher.Transaction)
: (Equal Nat
//Left side
(User.Sipher.get_total_wallet_value (User.Sipher.get_all_keys(Pair.fst
(Maybe.default (User.Sipher.Transfer from to User.Sipher.Proof_wallet value)
(Pair.new User.Sipher.Proof_wallet transaction)))))
//Right side
(User.Sipher.get_total_wallet_value 
((User.Sipher.get_all_keys User.Sipher.Proof_wallet))))

User.Sipher.doesnt_change_value Bits.e to wallet value transaction = Equal.refl
User.Sipher.doesnt_change_value (Bits.o pred) to wallet value transaction = ?


//------------------
User.Sipher.Transfer 
  (from     : Bits) //It is going to be a string next
  (to       : Bits) //It is going to be a string next
  (wallet   : Bits.Map User.Sipher.Wallet)
  (value    : Nat)
: Maybe (Pair (Bits.Map User.Sipher.Wallet) User.Sipher.Transaction)

User.Sipher.Transfer from to wallet value = 
  // If the sender is zero_address it will fail
  if (Bits.equal from Bits.e) { 
    Maybe.none 
      // If the receiver is zero_address it will fail
  } else { if (Bits.equal to Bits.e) {
    Maybe.none
  } else { if (Nat.equal value Nat.zero) {
    Maybe.none
  } else { 
    let get_from = Bits.Map.get (Pair String Nat) wallet from
    //If sender address isnt found as a valid wallet, transaction will fail
    match Maybe get_from { 
      none => Maybe.none (Pair (Bits.Map User.Sipher.Wallet) User.Sipher.Transaction )
      some => 
        // Verifies if the sender really has the money for transacion + mana
        let sender_money = Pair.snd String Nat get_from.value
        //let avg_transaction_value = Nat.gtn (Nat.add value 
        if (Nat.gtn value sender_money) {  
          Maybe.none 
        } else {
          // Removes the money from the sender
          let new_from_value = (x => (Nat.sub x value)) :: Nat -> Nat
          let new_from       = Pair.map_snd get_from.value new_from_value
          let wallet         = Bits.Map.set wallet from new_from
          
          //Adds value to the receiver
          let new_to_value  = (x => (Nat.add x value)) :: Nat -> Nat
          let pair          = (y => y) :: (Pair String Nat) -> (Pair String Nat)
          let new_to        = (n => (Pair.map_snd String Nat Nat (pair n) (x => (new_to_value x)))) :: (Pair String Nat) -> (Pair String Nat)
          let wallet        = Bits.Map.mut wallet to (Pair.new "random" Nat.zero) new_to

          //Recipt
          let mana        = (Nat.div value (Nat.succ (Nat.succ Nat.zero)))
          let mana        = String.concat "mana_cost: " (Show.to_string (U60.show (Nat.to_u60 mana)))
          let receiver    = String.concat "receiver: "(Bits.to_string to)
          let value       = String.concat "value sent: " (Show.to_string (U60.show (Nat.to_u60 value)))
          let data        = 
            (String.concat (Bits.to_string from) 
            (String.concat " transfered "
            (String.concat value
            (String.concat " KGT to "
            (String.concat receiver
            (String.concat " and costed "
            (String.concat mana " mana.")))))))

          let receipt = (User.Sipher.Transaction.recipt mana receiver value data)
            
          Maybe.some (Pair.new wallet receipt)
        }
      }
    }}}


//---
//Proofs that, no matter which address, you cant transfer 0 money
User.Sipher.Cant_transfer_zero_theorem 
  (from: Bits) 
  (to: Bits) 
  (wallet: Bits.Map User.Sipher.Wallet) 
: Equal (User.Sipher.Transfer from to wallet Nat.zero ) Maybe.none
User.Sipher.Cant_transfer_zero_theorem  Bits.e          Bits.e         wallet  = Equal.refl
User.Sipher.Cant_transfer_zero_theorem  Bits.e         (Bits.o t.pred) wallet  = Equal.refl
User.Sipher.Cant_transfer_zero_theorem  Bits.e         (Bits.i t.pred) wallet  = Equal.refl
User.Sipher.Cant_transfer_zero_theorem (Bits.o f.pred)  Bits.e         wallet  = Equal.refl
User.Sipher.Cant_transfer_zero_theorem (Bits.i f.pred)  Bits.e         wallet  = Equal.refl
User.Sipher.Cant_transfer_zero_theorem (Bits.o f.pred) (Bits.o t.pred) wallet  = Equal.refl
User.Sipher.Cant_transfer_zero_theorem (Bits.i f.pred) (Bits.o t.pred) wallet  = Equal.refl
User.Sipher.Cant_transfer_zero_theorem (Bits.i f.pred) (Bits.i t.pred) wallet  = Equal.refl
User.Sipher.Cant_transfer_zero_theorem (Bits.o f.pred) (Bits.i t.pred) wallet  = Equal.refl

//--
//Proofs that the sender cannot be from the zero address
User.Sipher.From_cant_be_zero_address_theorem
  (to: Bits) 
  (wallet: Bits.Map User.Sipher.Wallet) 
  (value: Nat)
: Equal (User.Sipher.Transfer Bits.e to wallet value) Maybe.none
User.Sipher.From_cant_be_zero_address_theorem to wallet value = Equal.refl

//--
//Proofs that the receiver cannot be from the zero address
User.Sipher.To_cant_be_zero_address_theorem
  (from: Bits) 
  (wallet: Bits.Map User.Sipher.Wallet) 
  (value: Nat)
: Equal (User.Sipher.Transfer from Bits.e wallet value ) Maybe.none
User.Sipher.To_cant_be_zero_address_theorem Bits.e wallet value  = Equal.refl
User.Sipher.To_cant_be_zero_address_theorem (Bits.o pred) wallet value  = Equal.refl
User.Sipher.To_cant_be_zero_address_theorem (Bits.i pred) wallet value  = Equal.refl
//--

//Cant transfer if no money
//User.Sipher.Cant_transfer_from_ghost_account_theorem
  //(from: Bits)
  //(to: Bits)
  //(wallet: Bits.Map User.Sipher.Wallet)
  //(value: Nat)
  ////(e0: Equal (Maybe (Pair String Nat)) (Bits.Map.get (Pair String Nat) wallet from) (Maybe.none (Pair String Nat)))
//: Equal (Maybe (Pair (Bits.Map User.Sipher.Wallet) User.Sipher.Transaction)) (User.Sipher.Transfer from to wallet value) Maybe.none

//User.Sipher.transfer_maintains_value


Main {
  let list = (
    [
    //(Pair.new String (Pair String Nat) ("0")  (Pair.new String Nat "0x000001" (U60.to_nat 3)))
    //(Pair.new String (Pair String Nat) ("00") (Pair.new String Nat "0x000002" (U60.to_nat 3)))
    //(Pair.new String (Pair String Nat) ("01") (Pair.new String Nat "0x000003" (U60.to_nat 3)))
    //(Pair.new String (Pair String Nat) ("1")  (Pair.new String Nat "0x000004" (U60.to_nat 3)))
    //(Pair.new String (Pair String Nat) ("10") (Pair.new String Nat "0x000005" (U60.to_nat 3)))
    //(Pair.new String (Pair String Nat) ("11") (Pair.new String Nat "0x000006" (U60.to_nat 3)))
      
    (Pair.new String (Pair String Nat) ("0000001") (Pair.new String Nat "0x000001" (U60.to_nat 1)))
    (Pair.new String (Pair String Nat) ("0000010") (Pair.new String Nat "0x000002" (U60.to_nat 1)))
    (Pair.new String (Pair String Nat) ("0000011") (Pair.new String Nat "0x000003" (U60.to_nat 1)))
    (Pair.new String (Pair String Nat) ("0000100") (Pair.new String Nat "0x000004" (U60.to_nat 1)))
    (Pair.new String (Pair String Nat) ("0000101") (Pair.new String Nat "0x000005" (U60.to_nat 1)))
    (Pair.new String (Pair String Nat) ("0000110") (Pair.new String Nat "0x000006" (U60.to_nat 1)))
    (Pair.new String (Pair String Nat) ("0000111") (Pair.new String Nat "0x000007" (U60.to_nat 1)))
    (Pair.new String (Pair String Nat) ("0001000") (Pair.new String Nat "0x000008" (U60.to_nat 1)))
    (Pair.new String (Pair String Nat) ("0001001") (Pair.new String Nat "0x000009" (U60.to_nat 1)))
    (Pair.new String (Pair String Nat) ("0001010") (Pair.new String Nat "0x000010" (U60.to_nat 1)))
    (Pair.new String (Pair String Nat) ("0001011") (Pair.new String Nat "0x000011" (U60.to_nat 1)))
    (Pair.new String (Pair String Nat) ("0001111") (Pair.new String Nat "0x000012" (U60.to_nat 1)))
    ])

  let kingu = Bits.o(Bits.o Bits.e)
  let sipher = Bits.i(Bits.o Bits.e) 

  let w1  = (Bits.o (Bits.o (Bits.o (Bits.o (Bits.o (Bits.o (Bits.i (Bits.e))))))))
  let w2  = (Bits.o (Bits.o (Bits.o (Bits.o (Bits.o (Bits.i (Bits.o (Bits.e))))))))
  let w3  = (Bits.o (Bits.o (Bits.o (Bits.o (Bits.o (Bits.i (Bits.i (Bits.e))))))))
  let w4  = (Bits.o (Bits.o (Bits.o (Bits.o (Bits.i (Bits.o (Bits.o (Bits.e))))))))
  let w5  = (Bits.o (Bits.o (Bits.o (Bits.o (Bits.i (Bits.o (Bits.i (Bits.e))))))))
  let w6  = (Bits.o (Bits.o (Bits.o (Bits.o (Bits.i (Bits.i (Bits.o (Bits.e))))))))
  let w7  = (Bits.o (Bits.o (Bits.o (Bits.o (Bits.i (Bits.i (Bits.i (Bits.e))))))))
  let w8  = (Bits.o (Bits.o (Bits.o (Bits.i (Bits.o (Bits.o (Bits.o (Bits.e))))))))
  let w9  = (Bits.o (Bits.o (Bits.o (Bits.i (Bits.o (Bits.o (Bits.i (Bits.e))))))))
  let w10 = (Bits.o (Bits.o (Bits.o (Bits.i (Bits.o (Bits.i (Bits.o (Bits.e))))))))
  let w11 = (Bits.o (Bits.o (Bits.o (Bits.i (Bits.o (Bits.i (Bits.i (Bits.e))))))))
  let w12 = (Bits.o (Bits.o (Bits.o (Bits.i (Bits.i (Bits.i (Bits.i (Bits.e))))))))
  let value  = U60.to_nat 20
  let wallet = User.Sipher.Wallets
  let max_mana = U60.to_nat 120
  let list = User.Sipher.get_all_keys wallet
  Nat.to_u60 (User.Sipher.get_total_wallet_value list)
  //User.Sipher.Transfer kingu sipher wallet value 
  
}
//Bits.o Bits.e         = Corgan
//Bits.o(Bits.o Bits.e) = Kingu
//Bits.o(Bits.i Bits.e) = Jotario
//Bits.e
//Bits.i Bits.e         = Taelin
//Bits.i(Bits.o Bits.e) = Sipher
//Bits.i(Bits.i Bits.e) = Derenash

  ////let kingu = Bits.o(Bits.o Bits.e)
  ////let sipher = Bits.i(Bits.o Bits.e) 
  ////let wallet = User.Sipher.Wallets
  ////let transfer = User.Sipher.Transfer sipher kingu wallet 200
  ////let list = ["0101", "1010", "1001"]
  ////User.Sipher.List_to_BitsMap (list)
  //////transfer
////}

/// 
//--- Removing Ifs from transfers
//But should i really?


//But should i really?
//--- Removing Ifs from transfers
