User.Sipher.kgt.test_wallet : User.Sipher.kgt.wallet { 
  let start = User.Sipher.PatriciaTree.empty
  let jogas = User.Sipher.PatriciaTree.set start (U120.new 0 32) (U120.new 0 500)
  let corga = User.Sipher.PatriciaTree.set jogas (U120.new 0 64) (U120.new 0 5)
  let siphe = User.Sipher.PatriciaTree.set corga (U120.new 0 128) (U120.new 0 1000)
  let ooler = User.Sipher.PatriciaTree.set siphe (U120.new 0 256) (U120.new 0 100)
  let etriu = User.Sipher.PatriciaTree.set ooler (U120.new 0 18) (U120.new 0 10000)
  etriu
}


User.Sipher.kgt.wallet: Type { 
  User.Sipher.PatriciaTree
}

//Transfer Function without any verification
User.Sipher.kgt.transfer
  (from   : U120)
  (to     : U120)
  (value  : U120)
  (wallet : User.Sipher.kgt.wallet)
: User.Sipher.kgt.wallet

// Sender can't be zero address
User.Sipher.kgt.transfer (U120.new 0 0) to  value wallet  = wallet

// Receiver can't be zero address
User.Sipher.kgt.transfer from (U120.new 0 0) value wallet = wallet

// You can't make a zero value transaction
User.Sipher.kgt.transfer from to (U120.new 0 0) wallet = wallet

// If the wallets aren't invalid and the transaction isn't zero, proceeds to the
// next verification
User.Sipher.kgt.transfer from to value wallet = 
  let sender_money = User.Sipher.PatriciaTree.get wallet from
  User.Sipher.kgt.transfer.sender sender_money from to value wallet

// Verifies if the sender is really a valid person
User.Sipher.kgt.transfer.sender 
  (sender : Maybe U120)
  (from   : U120)
  (to     : U120)
  (value  : U120)
  (wallet : User.Sipher.kgt.wallet)
: User.Sipher.kgt.wallet
User.Sipher.kgt.transfer.sender (Maybe.none t) from to value wallet = wallet
User.Sipher.kgt.transfer.sender (Maybe.some t money) from to value wallet =
  User.Sipher.kgt.transfer.finish (U120.greater_than money value) money value from to wallet


// Once verified that the sender is a valid person, verifies if he has money, if
// so the transfer completes
User.Sipher.kgt.transfer.finish
  (has_money: Bool)
  (sender_money: U120)
  (transaction_value: U120)
  (from: U120)
  (to: U120)
  (wallet : User.Sipher.kgt.wallet)
: User.Sipher.kgt.wallet
User.Sipher.kgt.transfer.finish Bool.false sender_money transaction_value from to wallet = wallet
User.Sipher.kgt.transfer.finish Bool.true  sender_money transaction_value from to wallet = 
  // Removes the value from the sender
  let new_value = U120.sub sender_money transaction_value
  let wallet    = User.Sipher.PatriciaTree.set wallet from new_value

  // Adds the value to the receiver
  //let new_value = (x: U120) => U120.add transaction_value x
  //let wallet    = User.Sipher.PatriciaTree.mut wallet to (U120.new 0 0) new_value

  wallet

Main {
  let value = (U120.new 0 100)
  let jogav = (U120.new 0 32)
  let corgv = (U120.new 0 64)
  let start = User.Sipher.PatriciaTree.empty
  let jogas = User.Sipher.PatriciaTree.set start (U120.new 0 32) (U120.new 0 500)
  let corga = User.Sipher.PatriciaTree.set jogas (U120.new 0 64) (U120.new 0 5)
  //let siphe = User.Sipher.PatriciaTree.set corga (U120.new 0 128) (U120.new 0 1000)
  //let ooler = User.Sipher.PatriciaTree.set siphe (U120.new 0 256) (U120.new 0 100)
  //let etriu = User.Sipher.PatriciaTree.set ooler (U120.new 0 18) (U120.new 0 10000)
  let wallet = corga
  corga
  //User.Sipher.kgt.transfer jogav corgv value jogas
}
