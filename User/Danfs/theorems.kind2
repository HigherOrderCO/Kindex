Problems.t0 : (Equal Bool Bool.true Bool.true)
Problems.t0 = Equal.refl

Problems.t1 (a: Bool) : (Equal Bool (Bool.and Bool.false a) Bool.false)
Problems.t1 a = Equal.refl

Problems.t2 (a: Bool) : (Equal Bool (Bool.and a Bool.false) Bool.false)
Problems.t2 Bool.true =  Equal.refl
Problems.t2 Bool.false = Equal.refl

Problems.t3 (a: Bool) : (Equal Bool (Bool.or Bool.true a) Bool.true)
Problems.t3 a = Equal.refl

Problems.t4 (a: Bool) : (Equal Bool (Bool.or a Bool.true) Bool.true)
Problems.t4 Bool.true  = Equal.refl
Problems.t4 Bool.false = Equal.refl

Problems.t5 (a: Bool) : (Equal Bool (Bool.equal a a) Bool.true)
Problems.t5 Bool.true  = Equal.refl
Problems.t5 Bool.false = Equal.refl

Problems.t6 (a: Bool) : (Equal Bool (Bool.not (Bool.not a)) a)
Problems.t6 Bool.true  = Equal.refl
Problems.t6 Bool.false = Equal.refl

Problems.t7 (a: Bool) (b: Bool) : (Equal Bool (Bool.not(Bool.and a b)) (Bool.or(Bool.not a) (Bool.not b)))
Problems.t7 Bool.true  b = Equal.refl
Problems.t7 Bool.false b = Equal.refl

Problems.t8 (a: Bool) (b: Bool) : (Equal Bool (Bool.not(Bool.or a b)) (Bool.and(Bool.not a) (Bool.not b)))
Problems.t8 Bool.true  b = Equal.refl
Problems.t8 Bool.false b = Equal.refl

Problems.t9 <a: Type> <b: Type> (pair: Pair a b) : (Equal (Pair a b) (Pair.new a b (Pair.fst a b pair) (Pair.snd a b pair)) pair)
Problems.t9 a1 b1 (Pair.new a2 b2 fst snd) = Equal.refl

Problems.t10 <a: Type> <b: Type> (pair: Pair a b) : (Equal (Pair a b) (Pair.swap b a (Pair.swap a b pair)) pair)
Problems.t10 a1 b1 (Pair.new a2 b2 fst snd) = Equal.refl

Problems.t11 (n: Nat) : (Equal Nat (Nat.same n) n)
Problems.t11  Nat.zero    = Equal.refl
Problems.t11 (Nat.succ n) =
  let ind = Problems.t11 n
  let app = Equal.apply (x => Nat.succ x) ind
  app

Problems.t12 (n: Nat) : (Equal Nat (Nat.half(Nat.double n)) n)
Problems.t12  Nat.zero    = Equal.refl
Problems.t12 (Nat.succ n) =
  let ind = Problems.t12 n
  let app = Equal.apply (x => Nat.succ x) ind
  app

Problems.t13 (n: Nat) : (Equal Nat (Nat.add Nat.zero n) n)
Problems.t13 n = Equal.refl

Problems.t14 (n: Nat) : (Equal Nat (Nat.add n Nat.zero) n)
Problems.t14  Nat.zero    = Equal.refl
Problems.t14 (Nat.succ n) =
  let ind = Problems.t14 n
  let app = Equal.apply (x => Nat.succ x) ind
  app

Problems.t15 (n: Nat) (m: Nat) : (Equal Nat (Nat.add(Nat.succ n) m) (Nat.succ(Nat.add n m)))
Problems.t15 n m = Equal.refl

Problems.t16 (n: Nat) (m: Nat) : (Equal Nat (Nat.add n (Nat.succ m)) (Nat.succ(Nat.add n m)))
Problems.t16  Nat.zero    m = Equal.refl
Problems.t16 (Nat.succ n) m =
  let ind = Problems.t16 n m
  Equal.apply (x => Nat.succ x) ind

Problems.t17 (n: Nat) (m: Nat) : (Equal Nat (Nat.add n m) (Nat.add m n))
Problems.t17  Nat.zero    m =
  Equal.mirror (Problems.t14 m)
Problems.t17 (Nat.succ n) m =
  let ind = Problems.t17 n m
  let app = Equal.apply (x => Nat.succ x) ind
  Equal.chain app (Equal.mirror (Problems.t16 m n))

Problems.t18 (n: Nat) : (Equal Nat (Nat.add n n) (Nat.double n))
Problems.t18  Nat.zero    = Equal.refl
Problems.t18 (Nat.succ n) =
  let ind = Problems.t18 n
  let app = Equal.apply (x => Nat.succ x) ind
  let chn = Equal.chain (Problems.t16 n n) app
  Equal.apply (x => Nat.succ x) chn

Problems.t19 (n: Nat) : (Equal Bool (Nat.ltn n (Nat.succ n)) Bool.true)
Problems.t19  Nat.zero    = Equal.refl
Problems.t19 (Nat.succ n) =
  let ind = Problems.t19 n
  ind

Problems.t20 (n: Nat) : (Equal Bool (Nat.gtn(Nat.succ n) n) Bool.true)
Problems.t20  Nat.zero    = Equal.refl
Problems.t20 (Nat.succ n) =
  let ind = Problems.t20 n
  ind

Problems.t21 (n: Nat) : (Equal Nat (Nat.sub n n) Nat.zero)
Problems.t21  Nat.zero    = Equal.refl
Problems.t21 (Nat.succ n) =
  let ind = Problems.t21 n
  ind

Problems.t22 (n: Nat) (e: Equal n (Nat.succ(Nat.zero))) : (Equal Nat (Nat.succ n) (Nat.succ (Nat.succ (Nat.zero))))
Problems.t22 n e =
  Equal.apply (x => Nat.succ x) e

Problems.t23 (n: Nat) (m: Nat) (e: Equal Bool (Nat.equal n m) Bool.true): (Equal Nat n m)
Problems.t23  Nat.zero     Nat.zero    e = Equal.refl
Problems.t23 (Nat.succ n) (Nat.succ m) e =
  let ind = Problems.t23 n m e
  let app = Equal.apply (x => Nat.succ x) ind
  app
Problems.t23  Nat.zero    (Nat.succ m) e =
  Empty.absurd (Bool.true_not_false (Equal.mirror e))
Problems.t23 (Nat.succ n)  Nat.zero    e =
  Empty.absurd (Bool.true_not_false (Equal.mirror e))

Problems.t24 (xs: List Nat) : (Equal Bool (Nat.gtn (List.length Nat (List.cons Nat (Nat.succ Nat.zero) xs)) Nat.zero) Bool.true)
Problems.t24 xs = Equal.refl

Problems.t25 <a: Type> (xs: List a) : (Equal (List a) (List.map a a xs (x => x)) xs)
Problems.t25 a (List.nil  t     ) = Equal.refl
Problems.t25 a (List.cons t x xs) =
  let ind = Problems.t25 a xs
  let app = Equal.apply (ys => List.cons t x ys) ind
  app

Problems.t26 <a: Type> (xs: List a) (ys: List a) : (Equal Nat (Nat.add (List.length a xs) (List.length a ys)) (List.length a (List.concat a xs ys)))
Problems.t26 a (List.nil  t     ) ys = Equal.refl
Problems.t26 a (List.cons t x xs) ys =
  let ind = Problems.t26 a xs ys
  let app = Equal.apply (x => Nat.succ x) ind
  app

Problems.t27 <a: Type> (xs: List a) : (Equal (List a) (List.reverse a (List.reverse a xs)) xs)
Problems.t27 a xs =
  let app = Problems.t27.aux a xs (List.nil a)
  app

Problems.t27.aux <a: Type> (xs: List a) (ys: List a) : (Equal (List a) (List.reverse a (List.reverse.go a xs ys)) (List.reverse.go a ys xs))
Problems.t27.aux a (List.nil  t     ) ys = Equal.refl
Problems.t27.aux a (List.cons t x xs) ys =
  let ind = Problems.t27.aux xs (List.cons x ys)
  ind

Problems.t28 : Not (Equal Bool Bool.true Bool.false)
Problems.t28 =
  (e => Empty.absurd (Bool.true_not_false e))

Problems.t29 : Not (Equal Nat (Nat.succ (Nat.succ (Nat.zero))) (Nat.succ (Nat.zero)))
Problems.t29 =
  (e1 =>
  (let e0 = Equal.apply (x => Nat.pred    x) e1
  (let e  = Equal.apply (x => Nat.is_succ x) e0
  Empty.absurd (Bool.true_not_false e))))

Problems.t30 (a: Bool) : Not (Equal Bool (Bool.or (Bool.true) a) Bool.false)
Problems.t30 a =
  (e => Empty.absurd (Bool.true_not_false e))

Problems.t31 (a: Bool) : Not (Equal Bool (Bool.or a (Bool.true)) Bool.false)
Problems.t31 Bool.true  =
  (e => Empty.absurd (Bool.true_not_false e))
Problems.t31 Bool.false =
  (e => Empty.absurd (Bool.true_not_false e))

Problems.t32 (a: Bool) : Not (Equal Bool (Bool.and (Bool.false) a) Bool.true)
Problems.t32 a =
  (e => Empty.absurd (Bool.true_not_false (Equal.mirror e)))

Problems.t33 (a: Bool) : Not (Equal Bool (Bool.and a (Bool.false)) Bool.true)
Problems.t33 Bool.true  =
  (e => Empty.absurd (Bool.true_not_false (Equal.mirror e)))
Problems.t33 Bool.false =
  (e => Empty.absurd (Bool.true_not_false (Equal.mirror e)))

Problems.t34 <t: Type> (a: t) (b: t) (e: Equal t a b): Equal t b a
Problems.t34 t a b e =
  Equal.mirror e

Problems.t35 <t: Type> (a: t) (b: t) (c: t) (e0: Equal t a b) (e1: Equal t b c): Equal t a c
Problems.t35 t a b c e0 e1 =
  Equal.chain e0 e1

Problems.t36 (a: Nat) (f: Nat -> Type) (p: (f a)) : f (Nat.same a)
Problems.t36 a f p =
  Equal.rewrite (Equal.mirror (Problems.t11 a)) f p
