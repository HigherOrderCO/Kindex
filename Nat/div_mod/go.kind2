// `n` should start as the numerator, counting down to zero
// `cnt` counts from the denominator, down to zero and resets back to the denominator.
//     We use cnt to count both the quocient (how many times it hit zero), and the remainder (whatever is left at the end)
// `den` is the denominator
// `quo` accumulates the quocient
Nat.div_mod.go (n: Nat) (cnt: Nat) (den: Nat) (quo: Nat) : (Pair Nat Nat)

Nat.div_mod.go  Nat.zero          Nat.zero     den quo = Pair.new (Nat.succ quo) Nat.zero
Nat.div_mod.go  Nat.zero          cnt          den quo = Pair.new           quo (Nat.sub den cnt)

Nat.div_mod.go  n                 Nat.zero     den quo = Nat.div_mod.go n   den   den (Nat.succ quo)
Nat.div_mod.go (Nat.succ n.p) (Nat.succ cnt.p) den quo = Nat.div_mod.go n.p cnt.p den quo