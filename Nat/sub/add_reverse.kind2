// Proof that b = (b + a) - a
// Essentially proves that subtraction undoes addition.
// Doesn't typecheck right now, apparently because of a Kind2 typechecker bug.

Nat.sub.add_reverse (a: Nat) (b: Nat): (Equal b (Nat.sub (Nat.add b a) a))
Nat.sub.add_reverse Nat.zero b = 
	// Goal: (b + 0) - 0 == b

	// b == b + 0
	let q = Nat.add.comm.zero b
	// (b + 0) - 0 == b + 0
	let w = Nat.sub.zero (Nat.add b Nat.zero)
	// Chain both to get goal.
	Equal.chain q (Equal.mirror w)
Nat.sub.add_reverse (Nat.succ a) b = 
	// Goal: b == (b + (a + 1)) - (a + 1)


	// ((a + 1) + b) == b + (a + 1)
	// Reduces to
	// (a + b) + 1 == b + (a + 1)
	let e = Nat.add.comm  (Nat.succ a) b
	// ((a + b) + 1) - (a + 1) == (b + (a + 1)) - (a + 1)
	// Reduces to
	// (a + b) - a == (b + (a + 1)) - (a + 1)
	let e = Equal.apply (x => (Nat.sub x (Nat.succ a))) e
	
	// b + a == a + b 
	let f = Nat.add.comm b a
	// (b + a) - a == (a + b) - a
	let f = Equal.apply (x => (Nat.sub x a)) f
	
	// b = (b + a) - a
	let induction = Nat.sub.add_reverse a b
	
	let final = induction
	
	// b = (a + b) - a
	let final = Equal.chain final f
	// b = (b + (a + 1)) - (a + 1)
	let final = Equal.chain final e
	
	final
