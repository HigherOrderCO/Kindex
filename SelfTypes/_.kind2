// Term types
// ====================

Term : Type
  Var (name: String) (idx : U60) : Term
  Ref (name: String) : Term
  Typ : Term
  All (eras: Bool) (self: String) (name: String) (var_type: Term) (body: Term -> Term -> Term) : Term
  Lam (var: String) (body: Term -> Term) : Term
  App (func: Term) (arg: Term) : Term
  Let (var: String) (expr: Term) (body: Term -> Term) : Term
  Ann (done: Bool) (expr: Term) (typp: Term) : Term
  
// Automatically derived from _.type
Term.match (x: (Term)) -(p: (x: (Term)) Type) (Var: (name: String) (idx: U60) (p (Var name idx))) (Ref: (name: String) (p (Ref name))) (Typ: (p (Typ))) (All: (eras: Bool) (self: String) (name: String) (var_type: Term) (body: (_: Term) (_: Term) Term) (p (All eras self name var_type body))) (Lam: (var: String) (arg: Term -> Term) (p (Lam var arg))) (App: (rator: Term) (rand: Term) (p (App rator rand))) (Let: (var: String) (expr: Term) (bodyy: Term -> Term) (p (Let var expr bodyy))) (Ann: (done: Bool) (expr: Term) (typp: Term) (p (Ann done expr typp))) : (p x)
Term.match (Var name_ idx_) p var ref typ all lam app lett ann = (var name_ idx_)
Term.match (Ref name_) p var ref typ all lam app lett ann = (ref name_)
Term.match (Typ) p var ref typ all lam app lett ann = (typ)
Term.match (All eras_ self_ name_ var_type_ body_) p var ref typ all lam app lett ann = (all eras_ self_ name_ var_type_ body_)
Term.match (Lam var_ arg_) p var ref typ all lam app lett ann = (lam var_ arg_)
Term.match (App rator_ rand_) p var ref typ all lam app lett ann = (app rator_ rand_)
Term.match (Let var_ expr_ body_) p var ref typ all lam app lett ann = (lett var_ expr_ body_)
Term.match (Ann done_ expr_ typp_) p var ref typ all lam app lett ann = (ann done_ expr_ typp_)


Newline : String {
  (String.cons 10 String.nil)
}

Def: Type
Def.new (name : String) (typp: Term) (term: Term) : Def


Def.get_name (deff: Def) : String
Def.get_name (Def.new name _ _) = name
Def.get_term (deff: Def) : Term
Def.get_term (Def.new name typp term) = term

Def.get_typp (deff: Def) : Term
Def.get_typp (Def.new name typp term) = typp

Ctx : Type
Ctx = List (Pair String Term) // TODO: should be a hash map

Ctx.length (ctx: Ctx) : U60
Ctx.length ctx = (Nat.to_u60 (List.length ctx))

Ctx.find (pred: String -> Bool) (ctx: Ctx) : Maybe Term
Ctx.find pred [] = Maybe.none
Ctx.find pred (List.cons head tail) =
  let name = (Pair.fst head)
  if (pred name) { Maybe.some (Pair.snd head) } else { Ctx.find pred tail } 


Reply (A: Type) : Type
Reply.Val <a> (val : a)   : Reply a
Reply.Err <a> (err : String) : Reply a

Reply.bind <a: Type> <b: Type> (x : Reply a) (f : a -> Reply b) : Reply b
Reply.bind a b (Reply.Val x) f = f x
Reply.bind a b (Reply.Err msg) f = Reply.Err msg

Reply.pure <a> (val: a) : Reply a
Reply.pure a val = Reply.Val val

Reply.monad : Monad (a => Reply a) {
  (Monad.new (a => Reply a)
             (a => x => Reply.Val x)
	     (a => b => x => f => Reply.bind a b x f))
}

Defs : Type
Defs = List (Pair String Def) // TODO: should also be a map

Defs.find (name : String) (defs : Defs) : Maybe Def
Defs.find name List.nil = Maybe.none
Defs.find name (List.cons pair tail) =
  let def_name = Pair.fst pair
  let definition = Pair.snd pair
  if (String.equal name def_name) {
    Maybe.some definition
  }
  else {
    Defs.find name tail
  }

// TODO: should be a hash set
Seen.member (seen: List (Pair String String)) (elem: (Pair String String)) : Bool
Seen.member List.nil x = Bool.false
Seen.member (List.cons head tail) x =
  let eq = Bool.and (String.equal (Pair.fst head) (Pair.fst x)) (String.equal (Pair.snd head) (Pair.snd x)) 
  if eq {Bool.true} else {Seen.member tail x}  

// Term utilities
// =====================

Term.show (t: Term) : String
Term.show (Var name _) = name
Term.show (Ref name)   = name
Term.show  Typ         = "Type"
Term.show (All eras self name var_type body) =
  let befor = Bool.if eras "<" "("
  let after = Bool.if eras ">" ")"
  let var_t = Term.show var_type
  let body_ =  body (Var self 0) (Var name 0)
  String.flatten [befor, name, ": ", var_t, after, " -> ", (Term.show body_)]
Term.show (Lam name body) =
  let body_show = Term.show (body (Var name 0))
  String.flatten [name, " => ", body_show]
Term.show (App rator rand) =
  let func = Term.show rator
  let arg = Term.show rand
  String.flatten ["(", func, " ", arg, ")"]
Term.show (Ann _ expr _) = Term.show expr

Term.serialize (t: Term) (depth: U60) (ini: U60) : String
Term.serialize  Typ        _   _   = "*"
Term.serialize (Var _ lvl) dep ini =
  if (U60.greater_equal lvl ini) {
    String.flatten ["^-", ((U60.show (- (- dep lvl) 1)) "")]
  } else {
    String.flatten ["^+", ((U60.show lvl) "")]
  }
Term.serialize (Ref name)  _   _   = String.flatten ["$", name]
Term.serialize (All eras self name var_type body) dep ini =
  let init = Bool.if eras "%" "@"
  let bind = Term.serialize var_type dep ini
  let bodys = Term.serialize (body (Var "" dep) (Var "" (+ dep 1))) (+ dep 2) ini
  String.join "" [init, self, bind, bodys]
Term.serialize (Lam _ body) dep ini =
  String.flatten ["#", (Term.serialize (body (Var "" dep)) (+ dep 1) ini)]
Term.serialize (App func args) dep ini =
  let funs = Term.serialize func dep ini
  let argm = Term.serialize args dep ini
  String.join "" ["(", funs, " ", argm, ")"]
Term.serialize (Let _ expr body) dep ini =
  let exp = Term.serialize expr dep ini
  let bod = Term.serialize (body (Var "" dep)) (+ dep 1) ini
  String.join "" ["!", exp, bod]

Term.serialize (Ann _ expr _) dep ini = Term.serialize expr dep ini

Term.reduce (t: Term) (defs: Defs) : Term
Term.reduce (Ref name) defs =
  let search = Defs.find name defs
  match Maybe search {
    none => Ref name
    some => Term.reduce (Def.get_term search.value) defs
  }
Term.reduce (App rator rand) defs =
  let func = Term.reduce rator defs
  Term.reduce_app func rand defs
Term.reduce (Ann _ expr _) defs = Term.reduce expr defs
Term.reduce (Let _ expr body) defs = Term.reduce (body expr) defs
Term.reduce other defs = other

Term.reduce_app (f: Term) (rand: Term) (defs : Defs) : Term
Term.reduce_app (Lam _ body) rand defs = Term.reduce (body rand) defs
Term.reduce_app f rand defs = App f rand

Term.normalize (t: Term) (defs : Defs) : Term
Term.normalize (Var name idx) defs = Var name idx
Term.normalize (Ref name) defs = Ref name
Term.normalize Typ defs = Typ
Term.normalize (All eras self name var_type body) defs =
  let x_type = Term.normalize var_type defs
  let new_body = (s => x => Term.normalize (body s x) defs) :: Term -> Term -> Term
  All eras self name x_type new_body
Term.normalize (Lam name body) defs =
  let new_body = (x => Term.normalize (body x) defs) :: Term -> Term
  Lam name new_body
Term.normalize (App rator rand) defs =
  let func = Term.normalize rator defs
  let args = Term.normalize rand defs
  App func args
Term.normalize (Let _ expr body) defs = Term.normalize (body expr) defs
Term.normalize (Ann _ expr _) defs = Term.normalize expr defs

// Term equality
// ===================

// TODO: should really study how this works

Term.equal (t1: Term) (t2: Term) (defs: Defs) (depth: U60) (seen: List (Pair String String)) : Bool
Term.equal t1 t2 defs depth seen =
  let t1_reduced = Term.reduce t1 defs
  let t2_reduced = Term.reduce t2 defs
  let t1_serialized = Term.serialize t1_reduced depth depth
  let t2_serialized = Term.serialize t2_reduced depth depth
  let comparison = (Pair.new t1_serialized t2_serialized)
  if (Bool.or (String.equal t1_serialized t2_serialized) (Seen.member seen comparison)) {
     Bool.true
  } else {
    (Term.equal.aux t1_reduced t2_reduced defs depth (List.cons comparison seen))
  } // TODO: isnt there any smarter way to check this?


Term.equal.aux (t1: Term) (t2: Term) (defs: Defs) (depth: U60) (seen: List (Pair String String)) : Bool
Term.equal.aux (Ann _ exp1 _) (Ann _ exp2 _ ) defs depth seen =
  Term.equal exp1 exp2 defs depth seen // smaller recursion

Term.equal.aux (App f1 arg1) (App f2 arg2) defs depth seen = Bool.and (Term.equal f1 f2 defs depth seen) (Term.equal arg1 arg2 defs depth seen)

Term.equal.aux (Let name1 exp1 body1) (Let name2 exp2 body2) defs depth seen = 
  let t1_body = (body1 (Var name1 depth))
  let t2_body = (body2 (Var name1 depth)) // TODO: is this index right? shouldnt be name2?
  (Bool.and (Term.equal exp1    exp2    defs (+ depth 0) seen)
            (Term.equal t1_body t2_body defs (+ depth 1) seen)) // smaller recursion
	   
Term.equal.aux (Lam var1 body1) (Lam var2 body2) defs depth seen =
  let t1_body = body1 (Var var1 depth)
  let t2_body = body2 (Var var2 depth) // TODO : check index here too
  Term.equal t1_body t2_body defs (+ depth 1) seen // smaller

Term.equal.aux (All eras1 self1 name1 var_type1 body1) (All eras2 self2 name2 var_type2 body2) defs depth seen =
  let t1_body = body1 (Var self1 depth) (Var name1 (+ depth 1))
  let t2_body = body2 (Var self1 depth) (Var name1 (+ depth 1)) // TODO: check index here aswell
  (Bool.and (Bool.equal eras1 eras2)
            (Bool.and (Term.equal var_type1 var_type2 defs (+ depth 0) seen)
                      (Term.equal t1_body   t2_body   defs (+ depth 2) seen)))

Term.equal.aux Typ Typ defs depth seen = Bool.true
Term.equal.aux (Var _ idx1) (Var _ idx2) defs depth seen = U60.equal idx1 idx2
Term.equal.aux (Ref name1)  (Ref  name2) defs depth seen = String.equal name1 name2
Term.equal.aux _ _ defs depth seen = Bool.false

// Type checking
// ===========================

Term.type_check (t: Term) (typ: Term) (def_name : String) (defs : Defs) (ctx: Ctx) : Reply Term
Term.type_check (Let name expr body) typ def_name defs ctx =
  do Reply {
    ask expr_type = Term.type_infer expr def_name defs ctx
    let expr_var  = Ann Bool.true (Var name (Ctx.length ctx)) expr_type
    let body_ctx  = List.cons (Pair.new name expr_type) ctx
    (Term.type_check (body expr_var) typ def_name defs body_ctx)
  }

Term.type_check (Lam var lam_body) typ def_name defs ctx =
  let typev = Term.reduce typ defs
  Term.type_check.lam (Lam var lam_body) typev typ def_name defs ctx

Term.type_check term typ def_name defs ctx =
  do Reply {
    ask infer = Term.type_infer term def_name defs ctx
    let eq = Term.equal infer typ defs (Ctx.length ctx) []
    match Bool eq {
      true => Reply.Val term
      false =>
        let expected = Term.show (Term.normalize typ [])
	    let infered  = Term.show (Term.normalize infer [])
	    Reply.Err (String.flatten ["Expected term: ", (Term.show term), Newline,
		                       "to have type: ",  expected,         Newline,
				       "but infered: ",  infered,           Newline,
				       "in: ",           def_name])
    }
  }

Term.type_check.lam (t: Term) (type_reduced: Term) (typp: Term) (def_name: String) (defs: Defs) (ctx : Ctx) : Reply Term
Term.type_check.lam (Lam var lam_body) (All eras self name var_type body) typ def_name defs ctx =
  let self_var = Ann Bool.true (Lam var lam_body) typ
  let name_var = Ann Bool.true (Var name (+ (Ctx.length ctx) 1)) var_type
  let body_typ = body self_var name_var
  let body_ctx = List.cons (Pair.new name var_type) ctx
  Term.type_check (lam_body name_var) body_typ def_name defs body_ctx

Term.type_check.lam (Lam var lam_body) typev typ def_name defs ctx =
  Reply.Err (String.flatten ["Lambda does not have function type.\nIn: ", def_name, "\nfound:", (Term.show typev)])

  
Term.type_infer (t: Term) (def_name: String) (defs: Defs) (ctx: Ctx) : (Reply Term)
Term.type_infer (Var name idx) def_name defs ctx = Reply.Val (Var name idx) 
Term.type_infer (Ref name) def_name defs ctx =
  let definition = Defs.find name defs
  match Maybe definition {
     none => Reply.Err (String.flatten ["Unbound reference '", name, "' in '", def_name, "'"])
     some => Reply.Val (Def.get_typp definition.value)
  }

Term.type_infer Typ _ _ _ = Reply.Val Typ
Term.type_infer (Let name expr body) def_name defs ctx =
  do Reply {
    ask expr_typ = Term.type_infer expr def_name defs ctx
    let expr_var = Ann Bool.true (Var name (+ (Ctx.length ctx) 1)) expr_typ
    let body_ctx = List.cons (Pair.new name expr_typ) ctx
    (Term.type_infer (body expr_var) def_name defs body_ctx)
  }

Term.type_infer (All eras self name var_type body) def_name defs ctx =
  let term = (All eras self name var_type body) 
  do Reply {
    let self_var = Ann Bool.true (Var self (Ctx.length ctx)) term
    let name_var = Ann Bool.true (Var name (Ctx.length ctx)) var_type
    let body_ctx = List.cons (Pair.new self term) (List.cons (Pair.new name var_type) ctx)
    ask (Term.type_check var_type Typ def_name defs ctx)
    ask (Term.type_check (body self_var name_var) Typ def_name defs body_ctx)
    return Typ
  }

Term.type_infer (Ann don expr typ) def_name defs ctx =
  if don {
    Reply.Val typ
  }
  else {
    Term.type_check expr typ def_name defs ctx
  }

Term.type_infer (App func args) def_name defs ctx =
  do Reply {
    ask func_infer = Term.type_infer func def_name defs ctx
    let func_type  = Term.reduce func_infer defs
    (Term.type_infer.app (App func args) func_type def_name defs ctx)
  }

Term.type_infer term def_name defs ctx = Reply.Err (String.flatten ["Can't infer type for ", (Term.show term), "\nin:", def_name])

Term.type_infer.app (app: Term)  (typp : Term) (def_name: String) (defs: Defs) (ctx: Ctx) : Reply Term
Term.type_infer.app (App func args) (All eras self name var_type body) def_name defs ctx =
  do Reply {
    let self_var = Ann Bool.true func (All eras self name var_type body)
    let name_var = Ann Bool.true args var_type
    ask _        = Term.type_check args var_type def_name defs ctx
    let term_typ = body self_var name_var
    return term_typ
  }

Term.type_infer.app f t def_name defs ctx =
  Reply.Err (String.join "" ["Cannot apply non-function.\nIn definition ", def_name, " : ", (Term.show t)])


Check_defs (defs: Defs) (list_defs: Defs) : Reply String
Check_defs defs List.nil = do Reply {return "\nEverything Checks."}
Check_defs defs (List.cons pair tail) =
  let name = Pair.fst pair
  let deff = Pair.snd pair
  let typp = Def.get_typp deff
  let term = Def.get_term deff
  do Reply {
    ask Term.type_check typp Typ name defs []
    ask Term.type_check term typp name defs []
    ask msg  = Check_defs defs tail
    return String.flatten [name, " : ", (Term.show typp), "\n", msg]
  }


//        Kirei Kirei.Parser
// ============================

State : Type
State = Ctx -> Term

Symbol (str: String) : Parser Unit {
  let prs = do Parser {
    ask Parser.skip_whitespace
    ask r = Parser.string str
    return r 
  }
  Parser.expecting prs str
}

Parens <a: Type> (parser: Parser a) : Parser a {
  do Parser {
    ask Symbol "("
    ask ret = parser
    ask Symbol ")"
    return ret
  }
}

Identifier : Parser String {
  let prs = do Parser {
    ask Parser.skip_whitespace
    ask name = Parser.take_while1 (x => IsChar x)
    if (IsKeyword name) {
      Parser.empty
    }
    else {
      do Parser { return name }
    }
  }
  Parser.expecting prs "identifier"
}

IsChar (c: Char) : Bool {
  (Bool.or (Char.is_lower c)
  (Bool.or (Char.is_upper c)
  (Bool.or (Char.is_decimal c)
  (Bool.or (Char.equal '.' c)
  	   (Char.equal '_' c)))))
}

IsKeyword (name: String) : Bool {
  (Bool.or (String.equal name "let")
  (Bool.or (String.equal name "in")
  (String.equal name "Type")))
}
Var.Parser : Parser State {
  do Parser {
    ask name = Identifier
    return ((ctx : Ctx) =>
      let pred = (x => String.equal x name) :: String -> Bool
      let index = Ctx.find pred ctx
      match Maybe index {
        none => Ref name
	some => index.value
      }
    ) :: State
  }
}

Typ.Parser : Parser State {
  do Parser {
    ask Symbol "Type"
    return (_ => Typ) :: State 
  }
}

Atom : Parser State {
  let possibles = [Var.Parser, Typ.Parser, (Parens Term.Parser)]
  Parser.first_of possibles
}

Lam.Parser : Parser State {
  do Parser {
    ask var = Identifier
    ask Symbol "=>"
    ask body = Term.Parser
    let body = body :: State
    return (ctx =>
      Lam var (x => body (List.cons (Pair.new var x) ctx))
    ) :: State
  }
}

All.Parser : Parser State {
  do Parser {
    ask self = Parser.try Identifier
    let self = Maybe.default self ""
    ask eras = Parser.first_of [
	do Parser {
	  ask Symbol "("
	  return Bool.false
	},
	do Parser {
	  ask Symbol "<"
	  return Bool.true
	}
    ]
    ask name = Parser.try Identifier
    let name = Maybe.default name "" :: String
    ask Symbol ":"
    ask bind = Term.Parser
    let bind = bind :: State
    ask (if eras { Symbol ">" }
         else    { Symbol ")" })
    ask Symbol "->"
    ask body = Term.Parser
    let body = body :: State
    return (ctx =>
      All eras self name (bind ctx) (s => x =>
        body (List.cons (Pair.new name x) (List.cons (Pair.new self s) ctx)))
    ):: State
  }
}

Let.Parser : Parser State {
  do Parser {
    ask (Symbol "let")
    ask var = Identifier
    ask (Symbol "=")
    ask expr = Term.Parser
    let expr = expr :: State
    ask (Symbol "in")
    ask body = Term.Parser
    let body = body :: State
    return (ctx =>
      Let var (expr ctx) (x => body (List.cons (Pair.new var x) ctx))
     ):: Ctx -> Term
  }
}

Spine : Parser State {
  do Parser {
    ask first = Atom
    ask apps  = Parser.many Atom
    let apper = (x => y => ctx => App (x ctx) (y ctx)) :: State -> State -> State
    return WeirdFold apper first apps
  }
}


WeirdFold (f : State -> State -> State) (nil: State) (list: List State) : State
WeirdFold f nil List.nil = nil
WeirdFold f nil (List.cons head tail) = WeirdFold f (f nil head) tail

FunOrSpine : Parser State {
  do Parser {
     ask spine = Spine
     let spine = spine :: State
     ask arrow = Parser.try (Symbol "->")
     match Maybe arrow {
       none => do Parser { return spine }
       some => do Parser {
         ask body = Term.Parser
	 			 let body = body :: State
         return (ctx =>
	   		   All Bool.false "" "" (spine ctx) (_ => _ => body ctx)
	 			 ) :: State
      }
    }
  }
}

Term.Parser : Parser State {
  let grammar = [
    All.Parser,
    Lam.Parser,
    FunOrSpine,
    Let.Parser
    ]
  Parser.expecting (Parser.first_of grammar) "term"
}

SelfTypes.parse_def : Parser Def {
  do Parser {
    ask name = Identifier
    ask Symbol ":"
    ask typp = Term.Parser
    let typp = typp :: State
    ask Symbol "="
    ask body = Term.Parser
    let body = body :: State
    ask Symbol ";"
    return Def.new name (typp []) (body [])
  }
}

SelfTypes.parse_defs : Parser Defs {
  do Parser {
    ask defs = Parser.many1 (do Parser {
      ask deff = SelfTypes.parse_def
      return Pair.new (Def.get_name deff) deff
    })
    ask Parser.skip_whitespace
    ask Parser.eof
    return defs
  }
}

SelfTypes.type_check (code: String) : String {
  let parsed = Parser.run SelfTypes.parse_defs code
  match Either parsed {
    right => match Parser.Error err = parsed.val { new => err.msg }
     left =>
      let result = Check_defs parsed.val parsed.val
      SelfTypes.type_check.aux result
  }
}

SelfTypes.type_check.aux (result: Reply String) : String
SelfTypes.type_check.aux (Reply.Err err) = String.flatten ["Error:", Newline, err]
SelfTypes.type_check.aux (Reply.Val val) = val

Main : String {
  let code = "
  Bool.false : Bool = P => t => f => f;
  Bool.true  : Bool = P => t => f => t;
  Bool : Type =
    self<P: Bool -> Type> ->
    (t : (P Bool.true)) ->
    (f : (P Bool.false)) ->
    P self;
  "
  SelfTypes.type_check code
}
