//Foo (a: Nat) (b: Nat) (e: Equal Nat a b) : Equal Nat b a
//Foo a b e =
  //let e0 = Equal.rewrite 
  //?



Equal.rewrite
  <t: Type>
  <a: t>
  <b: t>
  (e: Equal t a b)
  (p: t -> Type)
  (x: p a)
: p b



//e: (3 + a) == (b - 1)
//v: Vector (3 + a) Bool
//k: ......... ........ (PARQUE_QUE_QUEREMOS_TROCAR) ...................
//----------------------


//(Equal.rewrite e (x => Vector x Bool) v) : Vector (b - 1) Bool


//v: Vector (3 + a) Bool
//e: (3 + a) == (b - 1)

//Equal.rewrite e (x => Vector x Bool) v
//- substitua o lado esquerdo de 'e',
//- pelo lado direito de 'e',
//- no tipo do 'v', que Ã© (.... X ....)


//...
//...
//...
//...
//...
//...
//...
//e: (x + 0) == x
//...
//...
//...
//...
//...
//...
//...
//...
Foo
  (a: Nat)
  (b: Nat)
  (c: Nat)
  (p: Nat -> Type)
  (e: Equal Nat (Nat.add a b) c)
  (k: p (Nat.add (Nat.add a b) Nat.zero))
: p (Nat.add c Nat.zero)
//Foo a b c p e k = Confia



//Confia <t: Type> : t









